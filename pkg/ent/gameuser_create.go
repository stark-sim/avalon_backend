// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/avalon_backend/pkg/ent/card"
	"github.com/stark-sim/avalon_backend/pkg/ent/game"
	"github.com/stark-sim/avalon_backend/pkg/ent/gameuser"
)

// GameUserCreate is the builder for creating a GameUser entity.
type GameUserCreate struct {
	config
	mutation *GameUserMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (guc *GameUserCreate) SetCreatedBy(i int64) *GameUserCreate {
	guc.mutation.SetCreatedBy(i)
	return guc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (guc *GameUserCreate) SetNillableCreatedBy(i *int64) *GameUserCreate {
	if i != nil {
		guc.SetCreatedBy(*i)
	}
	return guc
}

// SetUpdatedBy sets the "updated_by" field.
func (guc *GameUserCreate) SetUpdatedBy(i int64) *GameUserCreate {
	guc.mutation.SetUpdatedBy(i)
	return guc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (guc *GameUserCreate) SetNillableUpdatedBy(i *int64) *GameUserCreate {
	if i != nil {
		guc.SetUpdatedBy(*i)
	}
	return guc
}

// SetCreatedAt sets the "created_at" field.
func (guc *GameUserCreate) SetCreatedAt(t time.Time) *GameUserCreate {
	guc.mutation.SetCreatedAt(t)
	return guc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guc *GameUserCreate) SetNillableCreatedAt(t *time.Time) *GameUserCreate {
	if t != nil {
		guc.SetCreatedAt(*t)
	}
	return guc
}

// SetUpdatedAt sets the "updated_at" field.
func (guc *GameUserCreate) SetUpdatedAt(t time.Time) *GameUserCreate {
	guc.mutation.SetUpdatedAt(t)
	return guc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (guc *GameUserCreate) SetNillableUpdatedAt(t *time.Time) *GameUserCreate {
	if t != nil {
		guc.SetUpdatedAt(*t)
	}
	return guc
}

// SetDeletedAt sets the "deleted_at" field.
func (guc *GameUserCreate) SetDeletedAt(t time.Time) *GameUserCreate {
	guc.mutation.SetDeletedAt(t)
	return guc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guc *GameUserCreate) SetNillableDeletedAt(t *time.Time) *GameUserCreate {
	if t != nil {
		guc.SetDeletedAt(*t)
	}
	return guc
}

// SetUserID sets the "user_id" field.
func (guc *GameUserCreate) SetUserID(i int64) *GameUserCreate {
	guc.mutation.SetUserID(i)
	return guc
}

// SetGameID sets the "game_id" field.
func (guc *GameUserCreate) SetGameID(i int64) *GameUserCreate {
	guc.mutation.SetGameID(i)
	return guc
}

// SetCardID sets the "card_id" field.
func (guc *GameUserCreate) SetCardID(i int64) *GameUserCreate {
	guc.mutation.SetCardID(i)
	return guc
}

// SetNumber sets the "number" field.
func (guc *GameUserCreate) SetNumber(u uint8) *GameUserCreate {
	guc.mutation.SetNumber(u)
	return guc
}

// SetID sets the "id" field.
func (guc *GameUserCreate) SetID(i int64) *GameUserCreate {
	guc.mutation.SetID(i)
	return guc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (guc *GameUserCreate) SetNillableID(i *int64) *GameUserCreate {
	if i != nil {
		guc.SetID(*i)
	}
	return guc
}

// SetGame sets the "game" edge to the Game entity.
func (guc *GameUserCreate) SetGame(g *Game) *GameUserCreate {
	return guc.SetGameID(g.ID)
}

// SetCard sets the "card" edge to the Card entity.
func (guc *GameUserCreate) SetCard(c *Card) *GameUserCreate {
	return guc.SetCardID(c.ID)
}

// Mutation returns the GameUserMutation object of the builder.
func (guc *GameUserCreate) Mutation() *GameUserMutation {
	return guc.mutation
}

// Save creates the GameUser in the database.
func (guc *GameUserCreate) Save(ctx context.Context) (*GameUser, error) {
	var (
		err  error
		node *GameUser
	)
	guc.defaults()
	if len(guc.hooks) == 0 {
		if err = guc.check(); err != nil {
			return nil, err
		}
		node, err = guc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = guc.check(); err != nil {
				return nil, err
			}
			guc.mutation = mutation
			if node, err = guc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(guc.hooks) - 1; i >= 0; i-- {
			if guc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, guc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GameUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GameUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (guc *GameUserCreate) SaveX(ctx context.Context) *GameUser {
	v, err := guc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (guc *GameUserCreate) Exec(ctx context.Context) error {
	_, err := guc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guc *GameUserCreate) ExecX(ctx context.Context) {
	if err := guc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guc *GameUserCreate) defaults() {
	if _, ok := guc.mutation.CreatedBy(); !ok {
		v := gameuser.DefaultCreatedBy
		guc.mutation.SetCreatedBy(v)
	}
	if _, ok := guc.mutation.UpdatedBy(); !ok {
		v := gameuser.DefaultUpdatedBy
		guc.mutation.SetUpdatedBy(v)
	}
	if _, ok := guc.mutation.CreatedAt(); !ok {
		v := gameuser.DefaultCreatedAt()
		guc.mutation.SetCreatedAt(v)
	}
	if _, ok := guc.mutation.UpdatedAt(); !ok {
		v := gameuser.DefaultUpdatedAt()
		guc.mutation.SetUpdatedAt(v)
	}
	if _, ok := guc.mutation.DeletedAt(); !ok {
		v := gameuser.DefaultDeletedAt
		guc.mutation.SetDeletedAt(v)
	}
	if _, ok := guc.mutation.ID(); !ok {
		v := gameuser.DefaultID()
		guc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guc *GameUserCreate) check() error {
	if _, ok := guc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "GameUser.created_by"`)}
	}
	if _, ok := guc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "GameUser.updated_by"`)}
	}
	if _, ok := guc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GameUser.created_at"`)}
	}
	if _, ok := guc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GameUser.updated_at"`)}
	}
	if _, ok := guc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "GameUser.deleted_at"`)}
	}
	if _, ok := guc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "GameUser.user_id"`)}
	}
	if _, ok := guc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game_id", err: errors.New(`ent: missing required field "GameUser.game_id"`)}
	}
	if _, ok := guc.mutation.CardID(); !ok {
		return &ValidationError{Name: "card_id", err: errors.New(`ent: missing required field "GameUser.card_id"`)}
	}
	if _, ok := guc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "GameUser.number"`)}
	}
	if _, ok := guc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "GameUser.game"`)}
	}
	if _, ok := guc.mutation.CardID(); !ok {
		return &ValidationError{Name: "card", err: errors.New(`ent: missing required edge "GameUser.card"`)}
	}
	return nil
}

func (guc *GameUserCreate) sqlSave(ctx context.Context) (*GameUser, error) {
	_node, _spec := guc.createSpec()
	if err := sqlgraph.CreateNode(ctx, guc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (guc *GameUserCreate) createSpec() (*GameUser, *sqlgraph.CreateSpec) {
	var (
		_node = &GameUser{config: guc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: gameuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: gameuser.FieldID,
			},
		}
	)
	if id, ok := guc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := guc.mutation.CreatedBy(); ok {
		_spec.SetField(gameuser.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := guc.mutation.UpdatedBy(); ok {
		_spec.SetField(gameuser.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := guc.mutation.CreatedAt(); ok {
		_spec.SetField(gameuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := guc.mutation.UpdatedAt(); ok {
		_spec.SetField(gameuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := guc.mutation.DeletedAt(); ok {
		_spec.SetField(gameuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := guc.mutation.UserID(); ok {
		_spec.SetField(gameuser.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := guc.mutation.Number(); ok {
		_spec.SetField(gameuser.FieldNumber, field.TypeUint8, value)
		_node.Number = value
	}
	if nodes := guc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameuser.GameTable,
			Columns: []string{gameuser.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GameID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := guc.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gameuser.CardTable,
			Columns: []string{gameuser.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CardID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameUserCreateBulk is the builder for creating many GameUser entities in bulk.
type GameUserCreateBulk struct {
	config
	builders []*GameUserCreate
}

// Save creates the GameUser entities in the database.
func (gucb *GameUserCreateBulk) Save(ctx context.Context) ([]*GameUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gucb.builders))
	nodes := make([]*GameUser, len(gucb.builders))
	mutators := make([]Mutator, len(gucb.builders))
	for i := range gucb.builders {
		func(i int, root context.Context) {
			builder := gucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gucb *GameUserCreateBulk) SaveX(ctx context.Context) []*GameUser {
	v, err := gucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gucb *GameUserCreateBulk) Exec(ctx context.Context) error {
	_, err := gucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gucb *GameUserCreateBulk) ExecX(ctx context.Context) {
	if err := gucb.Exec(ctx); err != nil {
		panic(err)
	}
}
