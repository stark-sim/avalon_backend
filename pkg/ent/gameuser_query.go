// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/avalon_backend/pkg/ent/game"
	"github.com/stark-sim/avalon_backend/pkg/ent/gameuser"
	"github.com/stark-sim/avalon_backend/pkg/ent/predicate"
)

// GameUserQuery is the builder for querying GameUser entities.
type GameUserQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GameUser
	withGame   *GameQuery
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*GameUser) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameUserQuery builder.
func (guq *GameUserQuery) Where(ps ...predicate.GameUser) *GameUserQuery {
	guq.predicates = append(guq.predicates, ps...)
	return guq
}

// Limit adds a limit step to the query.
func (guq *GameUserQuery) Limit(limit int) *GameUserQuery {
	guq.limit = &limit
	return guq
}

// Offset adds an offset step to the query.
func (guq *GameUserQuery) Offset(offset int) *GameUserQuery {
	guq.offset = &offset
	return guq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (guq *GameUserQuery) Unique(unique bool) *GameUserQuery {
	guq.unique = &unique
	return guq
}

// Order adds an order step to the query.
func (guq *GameUserQuery) Order(o ...OrderFunc) *GameUserQuery {
	guq.order = append(guq.order, o...)
	return guq
}

// QueryGame chains the current query on the "game" edge.
func (guq *GameUserQuery) QueryGame() *GameQuery {
	query := &GameQuery{config: guq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := guq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := guq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameuser.Table, gameuser.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gameuser.GameTable, gameuser.GameColumn),
		)
		fromU = sqlgraph.SetNeighbors(guq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameUser entity from the query.
// Returns a *NotFoundError when no GameUser was found.
func (guq *GameUserQuery) First(ctx context.Context) (*GameUser, error) {
	nodes, err := guq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gameuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (guq *GameUserQuery) FirstX(ctx context.Context) *GameUser {
	node, err := guq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameUser ID from the query.
// Returns a *NotFoundError when no GameUser ID was found.
func (guq *GameUserQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = guq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gameuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (guq *GameUserQuery) FirstIDX(ctx context.Context) int64 {
	id, err := guq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameUser entity is found.
// Returns a *NotFoundError when no GameUser entities are found.
func (guq *GameUserQuery) Only(ctx context.Context) (*GameUser, error) {
	nodes, err := guq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gameuser.Label}
	default:
		return nil, &NotSingularError{gameuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (guq *GameUserQuery) OnlyX(ctx context.Context) *GameUser {
	node, err := guq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameUser ID in the query.
// Returns a *NotSingularError when more than one GameUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (guq *GameUserQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = guq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gameuser.Label}
	default:
		err = &NotSingularError{gameuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (guq *GameUserQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := guq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameUsers.
func (guq *GameUserQuery) All(ctx context.Context) ([]*GameUser, error) {
	if err := guq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return guq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (guq *GameUserQuery) AllX(ctx context.Context) []*GameUser {
	nodes, err := guq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameUser IDs.
func (guq *GameUserQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := guq.Select(gameuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (guq *GameUserQuery) IDsX(ctx context.Context) []int64 {
	ids, err := guq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (guq *GameUserQuery) Count(ctx context.Context) (int, error) {
	if err := guq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return guq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (guq *GameUserQuery) CountX(ctx context.Context) int {
	count, err := guq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (guq *GameUserQuery) Exist(ctx context.Context) (bool, error) {
	if err := guq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return guq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (guq *GameUserQuery) ExistX(ctx context.Context) bool {
	exist, err := guq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (guq *GameUserQuery) Clone() *GameUserQuery {
	if guq == nil {
		return nil
	}
	return &GameUserQuery{
		config:     guq.config,
		limit:      guq.limit,
		offset:     guq.offset,
		order:      append([]OrderFunc{}, guq.order...),
		predicates: append([]predicate.GameUser{}, guq.predicates...),
		withGame:   guq.withGame.Clone(),
		// clone intermediate query.
		sql:    guq.sql.Clone(),
		path:   guq.path,
		unique: guq.unique,
	}
}

// WithGame tells the query-builder to eager-load the nodes that are connected to
// the "game" edge. The optional arguments are used to configure the query builder of the edge.
func (guq *GameUserQuery) WithGame(opts ...func(*GameQuery)) *GameUserQuery {
	query := &GameQuery{config: guq.config}
	for _, opt := range opts {
		opt(query)
	}
	guq.withGame = query
	return guq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameUser.Query().
//		GroupBy(gameuser.FieldCreatedBy).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (guq *GameUserQuery) GroupBy(field string, fields ...string) *GameUserGroupBy {
	grbuild := &GameUserGroupBy{config: guq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := guq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return guq.sqlQuery(ctx), nil
	}
	grbuild.label = gameuser.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int64 `json:"created_by"`
//	}
//
//	client.GameUser.Query().
//		Select(gameuser.FieldCreatedBy).
//		Scan(ctx, &v)
func (guq *GameUserQuery) Select(fields ...string) *GameUserSelect {
	guq.fields = append(guq.fields, fields...)
	selbuild := &GameUserSelect{GameUserQuery: guq}
	selbuild.label = gameuser.Label
	selbuild.flds, selbuild.scan = &guq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a GameUserSelect configured with the given aggregations.
func (guq *GameUserQuery) Aggregate(fns ...AggregateFunc) *GameUserSelect {
	return guq.Select().Aggregate(fns...)
}

func (guq *GameUserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range guq.fields {
		if !gameuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if guq.path != nil {
		prev, err := guq.path(ctx)
		if err != nil {
			return err
		}
		guq.sql = prev
	}
	return nil
}

func (guq *GameUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameUser, error) {
	var (
		nodes       = []*GameUser{}
		_spec       = guq.querySpec()
		loadedTypes = [1]bool{
			guq.withGame != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameUser{config: guq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(guq.modifiers) > 0 {
		_spec.Modifiers = guq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, guq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := guq.withGame; query != nil {
		if err := guq.loadGame(ctx, query, nodes, nil,
			func(n *GameUser, e *Game) { n.Edges.Game = e }); err != nil {
			return nil, err
		}
	}
	for i := range guq.loadTotal {
		if err := guq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (guq *GameUserQuery) loadGame(ctx context.Context, query *GameQuery, nodes []*GameUser, init func(*GameUser), assign func(*GameUser, *Game)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*GameUser)
	for i := range nodes {
		fk := nodes[i].GameID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(game.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (guq *GameUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := guq.querySpec()
	if len(guq.modifiers) > 0 {
		_spec.Modifiers = guq.modifiers
	}
	_spec.Node.Columns = guq.fields
	if len(guq.fields) > 0 {
		_spec.Unique = guq.unique != nil && *guq.unique
	}
	return sqlgraph.CountNodes(ctx, guq.driver, _spec)
}

func (guq *GameUserQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := guq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (guq *GameUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameuser.Table,
			Columns: gameuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: gameuser.FieldID,
			},
		},
		From:   guq.sql,
		Unique: true,
	}
	if unique := guq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := guq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameuser.FieldID)
		for i := range fields {
			if fields[i] != gameuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := guq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := guq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := guq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := guq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (guq *GameUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(guq.driver.Dialect())
	t1 := builder.Table(gameuser.Table)
	columns := guq.fields
	if len(columns) == 0 {
		columns = gameuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if guq.sql != nil {
		selector = guq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if guq.unique != nil && *guq.unique {
		selector.Distinct()
	}
	for _, p := range guq.predicates {
		p(selector)
	}
	for _, p := range guq.order {
		p(selector)
	}
	if offset := guq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := guq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameUserGroupBy is the group-by builder for GameUser entities.
type GameUserGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gugb *GameUserGroupBy) Aggregate(fns ...AggregateFunc) *GameUserGroupBy {
	gugb.fns = append(gugb.fns, fns...)
	return gugb
}

// Scan applies the group-by query and scans the result into the given value.
func (gugb *GameUserGroupBy) Scan(ctx context.Context, v any) error {
	query, err := gugb.path(ctx)
	if err != nil {
		return err
	}
	gugb.sql = query
	return gugb.sqlScan(ctx, v)
}

func (gugb *GameUserGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range gugb.fields {
		if !gameuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := gugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gugb *GameUserGroupBy) sqlQuery() *sql.Selector {
	selector := gugb.sql.Select()
	aggregation := make([]string, 0, len(gugb.fns))
	for _, fn := range gugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(gugb.fields)+len(gugb.fns))
		for _, f := range gugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(gugb.fields...)...)
}

// GameUserSelect is the builder for selecting fields of GameUser entities.
type GameUserSelect struct {
	*GameUserQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gus *GameUserSelect) Aggregate(fns ...AggregateFunc) *GameUserSelect {
	gus.fns = append(gus.fns, fns...)
	return gus
}

// Scan applies the selector query and scans the result into the given value.
func (gus *GameUserSelect) Scan(ctx context.Context, v any) error {
	if err := gus.prepareQuery(ctx); err != nil {
		return err
	}
	gus.sql = gus.GameUserQuery.sqlQuery(ctx)
	return gus.sqlScan(ctx, v)
}

func (gus *GameUserSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(gus.fns))
	for _, fn := range gus.fns {
		aggregation = append(aggregation, fn(gus.sql))
	}
	switch n := len(*gus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		gus.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		gus.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := gus.sql.Query()
	if err := gus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
