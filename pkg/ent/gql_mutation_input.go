// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateCardInput represents a mutation input for creating cards.
type CreateCardInput struct {
	CreatedBy *int64
	UpdatedBy *int64
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	Name      *string
}

// Mutate applies the CreateCardInput on the CardMutation builder.
func (i *CreateCardInput) Mutate(m *CardMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the CreateCardInput on the CardCreate builder.
func (c *CardCreate) SetInput(i CreateCardInput) *CardCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCardInput represents a mutation input for updating cards.
type UpdateCardInput struct {
	CreatedBy *int64
	UpdatedBy *int64
	UpdatedAt *time.Time
	DeletedAt *time.Time
	Name      *string
}

// Mutate applies the UpdateCardInput on the CardMutation builder.
func (i *UpdateCardInput) Mutate(m *CardMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateCardInput on the CardUpdate builder.
func (c *CardUpdate) SetInput(i UpdateCardInput) *CardUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCardInput on the CardUpdateOne builder.
func (c *CardUpdateOne) SetInput(i UpdateCardInput) *CardUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
