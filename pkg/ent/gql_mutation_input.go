// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateCardInput represents a mutation input for creating cards.
type CreateCardInput struct {
	CreatedBy   *int64
	UpdatedBy   *int64
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	DeletedAt   *time.Time
	Name        *string
	GameUserIDs []int64
}

// Mutate applies the CreateCardInput on the CardMutation builder.
func (i *CreateCardInput) Mutate(m *CardMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.GameUserIDs; len(v) > 0 {
		m.AddGameUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCardInput on the CardCreate builder.
func (c *CardCreate) SetInput(i CreateCardInput) *CardCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCardInput represents a mutation input for updating cards.
type UpdateCardInput struct {
	CreatedBy         *int64
	UpdatedBy         *int64
	UpdatedAt         *time.Time
	DeletedAt         *time.Time
	Name              *string
	AddGameUserIDs    []int64
	RemoveGameUserIDs []int64
}

// Mutate applies the UpdateCardInput on the CardMutation builder.
func (i *UpdateCardInput) Mutate(m *CardMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AddGameUserIDs; len(v) > 0 {
		m.AddGameUserIDs(v...)
	}
	if v := i.RemoveGameUserIDs; len(v) > 0 {
		m.RemoveGameUserIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCardInput on the CardUpdate builder.
func (c *CardUpdate) SetInput(i UpdateCardInput) *CardUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCardInput on the CardUpdateOne builder.
func (c *CardUpdateOne) SetInput(i UpdateCardInput) *CardUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGameInput represents a mutation input for creating games.
type CreateGameInput struct {
	CreatedBy   *int64
	UpdatedBy   *int64
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	DeletedAt   *time.Time
	GameUserIDs []int64
}

// Mutate applies the CreateGameInput on the GameMutation builder.
func (i *CreateGameInput) Mutate(m *GameMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.GameUserIDs; len(v) > 0 {
		m.AddGameUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateGameInput on the GameCreate builder.
func (c *GameCreate) SetInput(i CreateGameInput) *GameCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateGameInput represents a mutation input for updating games.
type UpdateGameInput struct {
	CreatedBy         *int64
	UpdatedBy         *int64
	UpdatedAt         *time.Time
	DeletedAt         *time.Time
	AddGameUserIDs    []int64
	RemoveGameUserIDs []int64
}

// Mutate applies the UpdateGameInput on the GameMutation builder.
func (i *UpdateGameInput) Mutate(m *GameMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.AddGameUserIDs; len(v) > 0 {
		m.AddGameUserIDs(v...)
	}
	if v := i.RemoveGameUserIDs; len(v) > 0 {
		m.RemoveGameUserIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateGameInput on the GameUpdate builder.
func (c *GameUpdate) SetInput(i UpdateGameInput) *GameUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateGameInput on the GameUpdateOne builder.
func (c *GameUpdateOne) SetInput(i UpdateGameInput) *GameUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGameUserInput represents a mutation input for creating gameusers.
type CreateGameUserInput struct {
	CreatedBy *int64
	UpdatedBy *int64
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	UserID    int64
	Number    uint8
	GameID    int64
	CardID    int64
}

// Mutate applies the CreateGameUserInput on the GameUserMutation builder.
func (i *CreateGameUserInput) Mutate(m *GameUserMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetUserID(i.UserID)
	m.SetNumber(i.Number)
	m.SetGameID(i.GameID)
	m.SetCardID(i.CardID)
}

// SetInput applies the change-set in the CreateGameUserInput on the GameUserCreate builder.
func (c *GameUserCreate) SetInput(i CreateGameUserInput) *GameUserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateGameUserInput represents a mutation input for updating gameusers.
type UpdateGameUserInput struct {
	CreatedBy *int64
	UpdatedBy *int64
	UpdatedAt *time.Time
	DeletedAt *time.Time
	UserID    *int64
	Number    *uint8
	ClearGame bool
	GameID    *int64
	ClearCard bool
	CardID    *int64
}

// Mutate applies the UpdateGameUserInput on the GameUserMutation builder.
func (i *UpdateGameUserInput) Mutate(m *GameUserMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if i.ClearGame {
		m.ClearGame()
	}
	if v := i.GameID; v != nil {
		m.SetGameID(*v)
	}
	if i.ClearCard {
		m.ClearCard()
	}
	if v := i.CardID; v != nil {
		m.SetCardID(*v)
	}
}

// SetInput applies the change-set in the UpdateGameUserInput on the GameUserUpdate builder.
func (c *GameUserUpdate) SetInput(i UpdateGameUserInput) *GameUserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateGameUserInput on the GameUserUpdateOne builder.
func (c *GameUserUpdateOne) SetInput(i UpdateGameUserInput) *GameUserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoomInput represents a mutation input for creating rooms.
type CreateRoomInput struct {
	CreatedBy   *int64
	UpdatedBy   *int64
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	DeletedAt   *time.Time
	Name        *string
	RoomUserIDs []int64
}

// Mutate applies the CreateRoomInput on the RoomMutation builder.
func (i *CreateRoomInput) Mutate(m *RoomMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.RoomUserIDs; len(v) > 0 {
		m.AddRoomUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRoomInput on the RoomCreate builder.
func (c *RoomCreate) SetInput(i CreateRoomInput) *RoomCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRoomInput represents a mutation input for updating rooms.
type UpdateRoomInput struct {
	CreatedBy         *int64
	UpdatedBy         *int64
	UpdatedAt         *time.Time
	DeletedAt         *time.Time
	Name              *string
	AddRoomUserIDs    []int64
	RemoveRoomUserIDs []int64
}

// Mutate applies the UpdateRoomInput on the RoomMutation builder.
func (i *UpdateRoomInput) Mutate(m *RoomMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AddRoomUserIDs; len(v) > 0 {
		m.AddRoomUserIDs(v...)
	}
	if v := i.RemoveRoomUserIDs; len(v) > 0 {
		m.RemoveRoomUserIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRoomInput on the RoomUpdate builder.
func (c *RoomUpdate) SetInput(i UpdateRoomInput) *RoomUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRoomInput on the RoomUpdateOne builder.
func (c *RoomUpdateOne) SetInput(i UpdateRoomInput) *RoomUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoomUserInput represents a mutation input for creating roomusers.
type CreateRoomUserInput struct {
	CreatedBy *int64
	UpdatedBy *int64
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	UserID    int64
	RoomID    int64
}

// Mutate applies the CreateRoomUserInput on the RoomUserMutation builder.
func (i *CreateRoomUserInput) Mutate(m *RoomUserMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetUserID(i.UserID)
	m.SetRoomID(i.RoomID)
}

// SetInput applies the change-set in the CreateRoomUserInput on the RoomUserCreate builder.
func (c *RoomUserCreate) SetInput(i CreateRoomUserInput) *RoomUserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRoomUserInput represents a mutation input for updating roomusers.
type UpdateRoomUserInput struct {
	CreatedBy *int64
	UpdatedBy *int64
	UpdatedAt *time.Time
	DeletedAt *time.Time
	UserID    *int64
	ClearRoom bool
	RoomID    *int64
}

// Mutate applies the UpdateRoomUserInput on the RoomUserMutation builder.
func (i *UpdateRoomUserInput) Mutate(m *RoomUserMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearRoom {
		m.ClearRoom()
	}
	if v := i.RoomID; v != nil {
		m.SetRoomID(*v)
	}
}

// SetInput applies the change-set in the UpdateRoomUserInput on the RoomUserUpdate builder.
func (c *RoomUserUpdate) SetInput(i UpdateRoomUserInput) *RoomUserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRoomUserInput on the RoomUserUpdateOne builder.
func (c *RoomUserUpdateOne) SetInput(i UpdateRoomUserInput) *RoomUserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
