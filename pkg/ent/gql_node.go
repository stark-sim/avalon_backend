// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"github.com/stark-sim/avalon_backend/pkg/ent/card"
	"github.com/stark-sim/avalon_backend/pkg/ent/game"
	"github.com/stark-sim/avalon_backend/pkg/ent/gameuser"
	"github.com/stark-sim/avalon_backend/pkg/ent/mission"
	"github.com/stark-sim/avalon_backend/pkg/ent/record"
	"github.com/stark-sim/avalon_backend/pkg/ent/room"
	"github.com/stark-sim/avalon_backend/pkg/ent/roomuser"
	"github.com/stark-sim/avalon_backend/pkg/ent/squad"
	"github.com/stark-sim/avalon_backend/pkg/ent/vote"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     int64    `json:"id,omitempty"`     // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string  `json:"type,omitempty"` // edge type.
	Name string  `json:"name,omitempty"` // edge name.
	IDs  []int64 `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (c *Card) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Card",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(c.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int64",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int64",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Name); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "card.Name",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Role); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "card.Role",
		Name:  "role",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Tale); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "tale",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "GameUser",
		Name: "game_users",
	}
	err = c.QueryGameUsers().
		Select(gameuser.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ga *Game) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ga.ID,
		Type:   "Game",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(ga.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int64",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ga.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int64",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ga.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ga.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ga.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ga.RoomID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int64",
		Name:  "room_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ga.EndBy); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "game.EndBy",
		Name:  "end_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ga.Capacity); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "uint8",
		Name:  "capacity",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "GameUser",
		Name: "game_users",
	}
	err = ga.QueryGameUsers().
		Select(gameuser.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Mission",
		Name: "missions",
	}
	err = ga.QueryMissions().
		Select(mission.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Room",
		Name: "room",
	}
	err = ga.QueryRoom().
		Select(room.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (gu *GameUser) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     gu.ID,
		Type:   "GameUser",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(gu.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int64",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gu.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int64",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gu.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gu.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gu.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gu.UserID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int64",
		Name:  "user_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gu.GameID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int64",
		Name:  "game_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gu.CardID); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "int64",
		Name:  "card_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gu.Number); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "uint8",
		Name:  "number",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Game",
		Name: "game",
	}
	err = gu.QueryGame().
		Select(game.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Card",
		Name: "card",
	}
	err = gu.QueryCard().
		Select(card.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (m *Mission) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     m.ID,
		Type:   "Mission",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(m.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int64",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int64",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.Sequence); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "uint8",
		Name:  "sequence",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.Status); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "mission.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.Failed); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "bool",
		Name:  "failed",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.GameID); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "int64",
		Name:  "game_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.Capacity); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "uint8",
		Name:  "capacity",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.LeaderID); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "int64",
		Name:  "leader_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Game",
		Name: "game",
	}
	err = m.QueryGame().
		Select(game.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Squad",
		Name: "squads",
	}
	err = m.QuerySquads().
		Select(squad.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Vote",
		Name: "votes",
	}
	err = m.QueryVotes().
		Select(vote.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (r *Record) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     r.ID,
		Type:   "Record",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(r.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int64",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int64",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UserID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int64",
		Name:  "user_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.RoomID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int64",
		Name:  "room_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Score); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "int32",
		Name:  "score",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Room",
		Name: "room",
	}
	err = r.QueryRoom().
		Select(room.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (r *Room) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     r.ID,
		Type:   "Room",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(r.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int64",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int64",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Name); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Closed); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "closed",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.GameOn); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "bool",
		Name:  "game_on",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "RoomUser",
		Name: "room_users",
	}
	err = r.QueryRoomUsers().
		Select(roomuser.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Game",
		Name: "games",
	}
	err = r.QueryGames().
		Select(game.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Record",
		Name: "records",
	}
	err = r.QueryRecords().
		Select(record.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ru *RoomUser) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ru.ID,
		Type:   "RoomUser",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ru.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int64",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ru.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int64",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ru.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ru.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ru.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ru.UserID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int64",
		Name:  "user_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ru.RoomID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int64",
		Name:  "room_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Room",
		Name: "room",
	}
	err = ru.QueryRoom().
		Select(room.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Squad) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Squad",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int64",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int64",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.MissionID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int64",
		Name:  "mission_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UserID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int64",
		Name:  "user_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Rat); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "bool",
		Name:  "rat",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Acted); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "bool",
		Name:  "acted",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Mission",
		Name: "mission",
	}
	err = s.QueryMission().
		Select(mission.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (v *Vote) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     v.ID,
		Type:   "Vote",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(v.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int64",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int64",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.MissionID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int64",
		Name:  "mission_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.UserID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int64",
		Name:  "user_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.Pass); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "bool",
		Name:  "pass",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.Voted); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "bool",
		Name:  "voted",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Mission",
		Name: "mission",
	}
	err = v.QueryMission().
		Select(mission.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id int64) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, int64) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, int64) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, int64) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id int64) (string, error) {
			return c.tables.nodeType(ctx, c.driver, id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id int64, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id int64) (Noder, error) {
	switch table {
	case card.Table:
		query := c.Card.Query().
			Where(card.ID(id))
		query, err := query.CollectFields(ctx, "Card")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case game.Table:
		query := c.Game.Query().
			Where(game.ID(id))
		query, err := query.CollectFields(ctx, "Game")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case gameuser.Table:
		query := c.GameUser.Query().
			Where(gameuser.ID(id))
		query, err := query.CollectFields(ctx, "GameUser")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case mission.Table:
		query := c.Mission.Query().
			Where(mission.ID(id))
		query, err := query.CollectFields(ctx, "Mission")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case record.Table:
		query := c.Record.Query().
			Where(record.ID(id))
		query, err := query.CollectFields(ctx, "Record")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case room.Table:
		query := c.Room.Query().
			Where(room.ID(id))
		query, err := query.CollectFields(ctx, "Room")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case roomuser.Table:
		query := c.RoomUser.Query().
			Where(roomuser.ID(id))
		query, err := query.CollectFields(ctx, "RoomUser")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case squad.Table:
		query := c.Squad.Query().
			Where(squad.ID(id))
		query, err := query.CollectFields(ctx, "Squad")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vote.Table:
		query := c.Vote.Query().
			Where(vote.ID(id))
		query, err := query.CollectFields(ctx, "Vote")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []int64, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int64)
	id2idx := make(map[int64][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []int64) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[int64][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case card.Table:
		query := c.Card.Query().
			Where(card.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Card")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case game.Table:
		query := c.Game.Query().
			Where(game.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Game")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case gameuser.Table:
		query := c.GameUser.Query().
			Where(gameuser.IDIn(ids...))
		query, err := query.CollectFields(ctx, "GameUser")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case mission.Table:
		query := c.Mission.Query().
			Where(mission.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Mission")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case record.Table:
		query := c.Record.Query().
			Where(record.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Record")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case room.Table:
		query := c.Room.Query().
			Where(room.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Room")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case roomuser.Table:
		query := c.RoomUser.Query().
			Where(roomuser.IDIn(ids...))
		query, err := query.CollectFields(ctx, "RoomUser")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case squad.Table:
		query := c.Squad.Query().
			Where(squad.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Squad")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vote.Table:
		query := c.Vote.Query().
			Where(vote.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Vote")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int64) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (*tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}
