// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/stark-sim/avalon_backend/pkg/ent/card"
	"github.com/stark-sim/avalon_backend/pkg/ent/game"
	"github.com/stark-sim/avalon_backend/pkg/ent/gameuser"
	"github.com/stark-sim/avalon_backend/pkg/ent/mission"
	"github.com/stark-sim/avalon_backend/pkg/ent/predicate"
	"github.com/stark-sim/avalon_backend/pkg/ent/record"
	"github.com/stark-sim/avalon_backend/pkg/ent/room"
	"github.com/stark-sim/avalon_backend/pkg/ent/roomuser"
	"github.com/stark-sim/avalon_backend/pkg/ent/squad"
	"github.com/stark-sim/avalon_backend/pkg/ent/vote"
)

// CardWhereInput represents a where input for filtering Card queries.
type CardWhereInput struct {
	Predicates []predicate.Card  `json:"-"`
	Not        *CardWhereInput   `json:"not,omitempty"`
	Or         []*CardWhereInput `json:"or,omitempty"`
	And        []*CardWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int64  `json:"id,omitempty"`
	IDNEQ   *int64  `json:"idNEQ,omitempty"`
	IDIn    []int64 `json:"idIn,omitempty"`
	IDNotIn []int64 `json:"idNotIn,omitempty"`
	IDGT    *int64  `json:"idGT,omitempty"`
	IDGTE   *int64  `json:"idGTE,omitempty"`
	IDLT    *int64  `json:"idLT,omitempty"`
	IDLTE   *int64  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int64  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int64  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int64 `json:"createdByIn,omitempty"`
	CreatedByNotIn []int64 `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int64  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int64  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int64  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int64  `json:"createdByLTE,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy      *int64  `json:"updatedBy,omitempty"`
	UpdatedByNEQ   *int64  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn    []int64 `json:"updatedByIn,omitempty"`
	UpdatedByNotIn []int64 `json:"updatedByNotIn,omitempty"`
	UpdatedByGT    *int64  `json:"updatedByGT,omitempty"`
	UpdatedByGTE   *int64  `json:"updatedByGTE,omitempty"`
	UpdatedByLT    *int64  `json:"updatedByLT,omitempty"`
	UpdatedByLTE   *int64  `json:"updatedByLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt      *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ   *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn    []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT    *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE   *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT    *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE   *time.Time  `json:"deletedAtLTE,omitempty"`

	// "name" field predicates.
	Name      *card.Name  `json:"name,omitempty"`
	NameNEQ   *card.Name  `json:"nameNEQ,omitempty"`
	NameIn    []card.Name `json:"nameIn,omitempty"`
	NameNotIn []card.Name `json:"nameNotIn,omitempty"`

	// "role" field predicates.
	Role      *card.Role  `json:"role,omitempty"`
	RoleNEQ   *card.Role  `json:"roleNEQ,omitempty"`
	RoleIn    []card.Role `json:"roleIn,omitempty"`
	RoleNotIn []card.Role `json:"roleNotIn,omitempty"`

	// "tale" field predicates.
	Tale             *string  `json:"tale,omitempty"`
	TaleNEQ          *string  `json:"taleNEQ,omitempty"`
	TaleIn           []string `json:"taleIn,omitempty"`
	TaleNotIn        []string `json:"taleNotIn,omitempty"`
	TaleGT           *string  `json:"taleGT,omitempty"`
	TaleGTE          *string  `json:"taleGTE,omitempty"`
	TaleLT           *string  `json:"taleLT,omitempty"`
	TaleLTE          *string  `json:"taleLTE,omitempty"`
	TaleContains     *string  `json:"taleContains,omitempty"`
	TaleHasPrefix    *string  `json:"taleHasPrefix,omitempty"`
	TaleHasSuffix    *string  `json:"taleHasSuffix,omitempty"`
	TaleEqualFold    *string  `json:"taleEqualFold,omitempty"`
	TaleContainsFold *string  `json:"taleContainsFold,omitempty"`

	// "red" field predicates.
	Red    *bool `json:"red,omitempty"`
	RedNEQ *bool `json:"redNEQ,omitempty"`

	// "game_users" edge predicates.
	HasGameUsers     *bool                 `json:"hasGameUsers,omitempty"`
	HasGameUsersWith []*GameUserWhereInput `json:"hasGameUsersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CardWhereInput) AddPredicates(predicates ...predicate.Card) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CardWhereInput filter on the CardQuery builder.
func (i *CardWhereInput) Filter(q *CardQuery) (*CardQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCardWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCardWhereInput is returned in case the CardWhereInput is empty.
var ErrEmptyCardWhereInput = errors.New("ent: empty predicate CardWhereInput")

// P returns a predicate for filtering cards.
// An error is returned if the input is empty or invalid.
func (i *CardWhereInput) P() (predicate.Card, error) {
	var predicates []predicate.Card
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, card.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Card, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, card.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Card, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, card.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, card.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, card.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, card.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, card.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, card.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, card.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, card.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, card.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, card.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, card.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, card.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, card.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, card.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, card.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, card.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, card.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, card.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, card.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, card.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, card.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, card.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, card.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, card.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, card.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, card.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, card.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, card.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, card.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, card.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, card.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, card.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, card.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, card.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, card.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, card.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, card.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, card.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, card.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, card.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, card.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, card.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, card.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, card.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, card.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, card.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, card.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, card.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, card.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, card.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, card.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, card.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, card.NameNotIn(i.NameNotIn...))
	}
	if i.Role != nil {
		predicates = append(predicates, card.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, card.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, card.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, card.RoleNotIn(i.RoleNotIn...))
	}
	if i.Tale != nil {
		predicates = append(predicates, card.TaleEQ(*i.Tale))
	}
	if i.TaleNEQ != nil {
		predicates = append(predicates, card.TaleNEQ(*i.TaleNEQ))
	}
	if len(i.TaleIn) > 0 {
		predicates = append(predicates, card.TaleIn(i.TaleIn...))
	}
	if len(i.TaleNotIn) > 0 {
		predicates = append(predicates, card.TaleNotIn(i.TaleNotIn...))
	}
	if i.TaleGT != nil {
		predicates = append(predicates, card.TaleGT(*i.TaleGT))
	}
	if i.TaleGTE != nil {
		predicates = append(predicates, card.TaleGTE(*i.TaleGTE))
	}
	if i.TaleLT != nil {
		predicates = append(predicates, card.TaleLT(*i.TaleLT))
	}
	if i.TaleLTE != nil {
		predicates = append(predicates, card.TaleLTE(*i.TaleLTE))
	}
	if i.TaleContains != nil {
		predicates = append(predicates, card.TaleContains(*i.TaleContains))
	}
	if i.TaleHasPrefix != nil {
		predicates = append(predicates, card.TaleHasPrefix(*i.TaleHasPrefix))
	}
	if i.TaleHasSuffix != nil {
		predicates = append(predicates, card.TaleHasSuffix(*i.TaleHasSuffix))
	}
	if i.TaleEqualFold != nil {
		predicates = append(predicates, card.TaleEqualFold(*i.TaleEqualFold))
	}
	if i.TaleContainsFold != nil {
		predicates = append(predicates, card.TaleContainsFold(*i.TaleContainsFold))
	}
	if i.Red != nil {
		predicates = append(predicates, card.RedEQ(*i.Red))
	}
	if i.RedNEQ != nil {
		predicates = append(predicates, card.RedNEQ(*i.RedNEQ))
	}

	if i.HasGameUsers != nil {
		p := card.HasGameUsers()
		if !*i.HasGameUsers {
			p = card.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGameUsersWith) > 0 {
		with := make([]predicate.GameUser, 0, len(i.HasGameUsersWith))
		for _, w := range i.HasGameUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGameUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, card.HasGameUsersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCardWhereInput
	case 1:
		return predicates[0], nil
	default:
		return card.And(predicates...), nil
	}
}

// GameWhereInput represents a where input for filtering Game queries.
type GameWhereInput struct {
	Predicates []predicate.Game  `json:"-"`
	Not        *GameWhereInput   `json:"not,omitempty"`
	Or         []*GameWhereInput `json:"or,omitempty"`
	And        []*GameWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int64  `json:"id,omitempty"`
	IDNEQ   *int64  `json:"idNEQ,omitempty"`
	IDIn    []int64 `json:"idIn,omitempty"`
	IDNotIn []int64 `json:"idNotIn,omitempty"`
	IDGT    *int64  `json:"idGT,omitempty"`
	IDGTE   *int64  `json:"idGTE,omitempty"`
	IDLT    *int64  `json:"idLT,omitempty"`
	IDLTE   *int64  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int64  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int64  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int64 `json:"createdByIn,omitempty"`
	CreatedByNotIn []int64 `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int64  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int64  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int64  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int64  `json:"createdByLTE,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy      *int64  `json:"updatedBy,omitempty"`
	UpdatedByNEQ   *int64  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn    []int64 `json:"updatedByIn,omitempty"`
	UpdatedByNotIn []int64 `json:"updatedByNotIn,omitempty"`
	UpdatedByGT    *int64  `json:"updatedByGT,omitempty"`
	UpdatedByGTE   *int64  `json:"updatedByGTE,omitempty"`
	UpdatedByLT    *int64  `json:"updatedByLT,omitempty"`
	UpdatedByLTE   *int64  `json:"updatedByLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt      *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ   *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn    []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT    *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE   *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT    *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE   *time.Time  `json:"deletedAtLTE,omitempty"`

	// "room_id" field predicates.
	RoomID      *int64  `json:"roomID,omitempty"`
	RoomIDNEQ   *int64  `json:"roomIDNEQ,omitempty"`
	RoomIDIn    []int64 `json:"roomIDIn,omitempty"`
	RoomIDNotIn []int64 `json:"roomIDNotIn,omitempty"`

	// "result" field predicates.
	Result      *game.Result  `json:"result,omitempty"`
	ResultNEQ   *game.Result  `json:"resultNEQ,omitempty"`
	ResultIn    []game.Result `json:"resultIn,omitempty"`
	ResultNotIn []game.Result `json:"resultNotIn,omitempty"`

	// "capacity" field predicates.
	Capacity      *uint8  `json:"capacity,omitempty"`
	CapacityNEQ   *uint8  `json:"capacityNEQ,omitempty"`
	CapacityIn    []uint8 `json:"capacityIn,omitempty"`
	CapacityNotIn []uint8 `json:"capacityNotIn,omitempty"`
	CapacityGT    *uint8  `json:"capacityGT,omitempty"`
	CapacityGTE   *uint8  `json:"capacityGTE,omitempty"`
	CapacityLT    *uint8  `json:"capacityLT,omitempty"`
	CapacityLTE   *uint8  `json:"capacityLTE,omitempty"`

	// "assassin_chance" field predicates.
	AssassinChance      *uint8  `json:"assassinChance,omitempty"`
	AssassinChanceNEQ   *uint8  `json:"assassinChanceNEQ,omitempty"`
	AssassinChanceIn    []uint8 `json:"assassinChanceIn,omitempty"`
	AssassinChanceNotIn []uint8 `json:"assassinChanceNotIn,omitempty"`
	AssassinChanceGT    *uint8  `json:"assassinChanceGT,omitempty"`
	AssassinChanceGTE   *uint8  `json:"assassinChanceGTE,omitempty"`
	AssassinChanceLT    *uint8  `json:"assassinChanceLT,omitempty"`
	AssassinChanceLTE   *uint8  `json:"assassinChanceLTE,omitempty"`

	// "closed" field predicates.
	Closed    *bool `json:"closed,omitempty"`
	ClosedNEQ *bool `json:"closedNEQ,omitempty"`

	// "game_users" edge predicates.
	HasGameUsers     *bool                 `json:"hasGameUsers,omitempty"`
	HasGameUsersWith []*GameUserWhereInput `json:"hasGameUsersWith,omitempty"`

	// "missions" edge predicates.
	HasMissions     *bool                `json:"hasMissions,omitempty"`
	HasMissionsWith []*MissionWhereInput `json:"hasMissionsWith,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GameWhereInput) AddPredicates(predicates ...predicate.Game) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GameWhereInput filter on the GameQuery builder.
func (i *GameWhereInput) Filter(q *GameQuery) (*GameQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGameWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGameWhereInput is returned in case the GameWhereInput is empty.
var ErrEmptyGameWhereInput = errors.New("ent: empty predicate GameWhereInput")

// P returns a predicate for filtering games.
// An error is returned if the input is empty or invalid.
func (i *GameWhereInput) P() (predicate.Game, error) {
	var predicates []predicate.Game
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, game.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Game, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, game.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Game, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, game.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, game.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, game.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, game.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, game.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, game.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, game.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, game.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, game.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, game.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, game.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, game.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, game.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, game.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, game.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, game.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, game.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, game.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, game.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, game.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, game.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, game.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, game.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, game.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, game.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, game.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, game.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, game.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, game.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, game.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, game.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, game.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, game.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, game.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, game.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, game.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, game.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, game.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, game.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, game.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, game.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, game.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, game.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, game.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, game.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, game.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, game.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, game.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, game.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.RoomID != nil {
		predicates = append(predicates, game.RoomIDEQ(*i.RoomID))
	}
	if i.RoomIDNEQ != nil {
		predicates = append(predicates, game.RoomIDNEQ(*i.RoomIDNEQ))
	}
	if len(i.RoomIDIn) > 0 {
		predicates = append(predicates, game.RoomIDIn(i.RoomIDIn...))
	}
	if len(i.RoomIDNotIn) > 0 {
		predicates = append(predicates, game.RoomIDNotIn(i.RoomIDNotIn...))
	}
	if i.Result != nil {
		predicates = append(predicates, game.ResultEQ(*i.Result))
	}
	if i.ResultNEQ != nil {
		predicates = append(predicates, game.ResultNEQ(*i.ResultNEQ))
	}
	if len(i.ResultIn) > 0 {
		predicates = append(predicates, game.ResultIn(i.ResultIn...))
	}
	if len(i.ResultNotIn) > 0 {
		predicates = append(predicates, game.ResultNotIn(i.ResultNotIn...))
	}
	if i.Capacity != nil {
		predicates = append(predicates, game.CapacityEQ(*i.Capacity))
	}
	if i.CapacityNEQ != nil {
		predicates = append(predicates, game.CapacityNEQ(*i.CapacityNEQ))
	}
	if len(i.CapacityIn) > 0 {
		predicates = append(predicates, game.CapacityIn(i.CapacityIn...))
	}
	if len(i.CapacityNotIn) > 0 {
		predicates = append(predicates, game.CapacityNotIn(i.CapacityNotIn...))
	}
	if i.CapacityGT != nil {
		predicates = append(predicates, game.CapacityGT(*i.CapacityGT))
	}
	if i.CapacityGTE != nil {
		predicates = append(predicates, game.CapacityGTE(*i.CapacityGTE))
	}
	if i.CapacityLT != nil {
		predicates = append(predicates, game.CapacityLT(*i.CapacityLT))
	}
	if i.CapacityLTE != nil {
		predicates = append(predicates, game.CapacityLTE(*i.CapacityLTE))
	}
	if i.AssassinChance != nil {
		predicates = append(predicates, game.AssassinChanceEQ(*i.AssassinChance))
	}
	if i.AssassinChanceNEQ != nil {
		predicates = append(predicates, game.AssassinChanceNEQ(*i.AssassinChanceNEQ))
	}
	if len(i.AssassinChanceIn) > 0 {
		predicates = append(predicates, game.AssassinChanceIn(i.AssassinChanceIn...))
	}
	if len(i.AssassinChanceNotIn) > 0 {
		predicates = append(predicates, game.AssassinChanceNotIn(i.AssassinChanceNotIn...))
	}
	if i.AssassinChanceGT != nil {
		predicates = append(predicates, game.AssassinChanceGT(*i.AssassinChanceGT))
	}
	if i.AssassinChanceGTE != nil {
		predicates = append(predicates, game.AssassinChanceGTE(*i.AssassinChanceGTE))
	}
	if i.AssassinChanceLT != nil {
		predicates = append(predicates, game.AssassinChanceLT(*i.AssassinChanceLT))
	}
	if i.AssassinChanceLTE != nil {
		predicates = append(predicates, game.AssassinChanceLTE(*i.AssassinChanceLTE))
	}
	if i.Closed != nil {
		predicates = append(predicates, game.ClosedEQ(*i.Closed))
	}
	if i.ClosedNEQ != nil {
		predicates = append(predicates, game.ClosedNEQ(*i.ClosedNEQ))
	}

	if i.HasGameUsers != nil {
		p := game.HasGameUsers()
		if !*i.HasGameUsers {
			p = game.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGameUsersWith) > 0 {
		with := make([]predicate.GameUser, 0, len(i.HasGameUsersWith))
		for _, w := range i.HasGameUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGameUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, game.HasGameUsersWith(with...))
	}
	if i.HasMissions != nil {
		p := game.HasMissions()
		if !*i.HasMissions {
			p = game.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMissionsWith) > 0 {
		with := make([]predicate.Mission, 0, len(i.HasMissionsWith))
		for _, w := range i.HasMissionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMissionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, game.HasMissionsWith(with...))
	}
	if i.HasRoom != nil {
		p := game.HasRoom()
		if !*i.HasRoom {
			p = game.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, game.HasRoomWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGameWhereInput
	case 1:
		return predicates[0], nil
	default:
		return game.And(predicates...), nil
	}
}

// GameUserWhereInput represents a where input for filtering GameUser queries.
type GameUserWhereInput struct {
	Predicates []predicate.GameUser  `json:"-"`
	Not        *GameUserWhereInput   `json:"not,omitempty"`
	Or         []*GameUserWhereInput `json:"or,omitempty"`
	And        []*GameUserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int64  `json:"id,omitempty"`
	IDNEQ   *int64  `json:"idNEQ,omitempty"`
	IDIn    []int64 `json:"idIn,omitempty"`
	IDNotIn []int64 `json:"idNotIn,omitempty"`
	IDGT    *int64  `json:"idGT,omitempty"`
	IDGTE   *int64  `json:"idGTE,omitempty"`
	IDLT    *int64  `json:"idLT,omitempty"`
	IDLTE   *int64  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int64  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int64  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int64 `json:"createdByIn,omitempty"`
	CreatedByNotIn []int64 `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int64  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int64  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int64  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int64  `json:"createdByLTE,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy      *int64  `json:"updatedBy,omitempty"`
	UpdatedByNEQ   *int64  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn    []int64 `json:"updatedByIn,omitempty"`
	UpdatedByNotIn []int64 `json:"updatedByNotIn,omitempty"`
	UpdatedByGT    *int64  `json:"updatedByGT,omitempty"`
	UpdatedByGTE   *int64  `json:"updatedByGTE,omitempty"`
	UpdatedByLT    *int64  `json:"updatedByLT,omitempty"`
	UpdatedByLTE   *int64  `json:"updatedByLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt      *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ   *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn    []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT    *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE   *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT    *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE   *time.Time  `json:"deletedAtLTE,omitempty"`

	// "user_id" field predicates.
	UserID      *int64  `json:"userID,omitempty"`
	UserIDNEQ   *int64  `json:"userIDNEQ,omitempty"`
	UserIDIn    []int64 `json:"userIDIn,omitempty"`
	UserIDNotIn []int64 `json:"userIDNotIn,omitempty"`
	UserIDGT    *int64  `json:"userIDGT,omitempty"`
	UserIDGTE   *int64  `json:"userIDGTE,omitempty"`
	UserIDLT    *int64  `json:"userIDLT,omitempty"`
	UserIDLTE   *int64  `json:"userIDLTE,omitempty"`

	// "game_id" field predicates.
	GameID      *int64  `json:"gameID,omitempty"`
	GameIDNEQ   *int64  `json:"gameIDNEQ,omitempty"`
	GameIDIn    []int64 `json:"gameIDIn,omitempty"`
	GameIDNotIn []int64 `json:"gameIDNotIn,omitempty"`

	// "card_id" field predicates.
	CardID      *int64  `json:"cardID,omitempty"`
	CardIDNEQ   *int64  `json:"cardIDNEQ,omitempty"`
	CardIDIn    []int64 `json:"cardIDIn,omitempty"`
	CardIDNotIn []int64 `json:"cardIDNotIn,omitempty"`

	// "number" field predicates.
	Number      *uint8  `json:"number,omitempty"`
	NumberNEQ   *uint8  `json:"numberNEQ,omitempty"`
	NumberIn    []uint8 `json:"numberIn,omitempty"`
	NumberNotIn []uint8 `json:"numberNotIn,omitempty"`
	NumberGT    *uint8  `json:"numberGT,omitempty"`
	NumberGTE   *uint8  `json:"numberGTE,omitempty"`
	NumberLT    *uint8  `json:"numberLT,omitempty"`
	NumberLTE   *uint8  `json:"numberLTE,omitempty"`

	// "game" edge predicates.
	HasGame     *bool             `json:"hasGame,omitempty"`
	HasGameWith []*GameWhereInput `json:"hasGameWith,omitempty"`

	// "card" edge predicates.
	HasCard     *bool             `json:"hasCard,omitempty"`
	HasCardWith []*CardWhereInput `json:"hasCardWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GameUserWhereInput) AddPredicates(predicates ...predicate.GameUser) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GameUserWhereInput filter on the GameUserQuery builder.
func (i *GameUserWhereInput) Filter(q *GameUserQuery) (*GameUserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGameUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGameUserWhereInput is returned in case the GameUserWhereInput is empty.
var ErrEmptyGameUserWhereInput = errors.New("ent: empty predicate GameUserWhereInput")

// P returns a predicate for filtering gameusers.
// An error is returned if the input is empty or invalid.
func (i *GameUserWhereInput) P() (predicate.GameUser, error) {
	var predicates []predicate.GameUser
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, gameuser.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GameUser, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, gameuser.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GameUser, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, gameuser.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, gameuser.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, gameuser.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, gameuser.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, gameuser.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, gameuser.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, gameuser.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, gameuser.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, gameuser.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, gameuser.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, gameuser.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, gameuser.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, gameuser.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, gameuser.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, gameuser.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, gameuser.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, gameuser.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, gameuser.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, gameuser.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, gameuser.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, gameuser.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, gameuser.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, gameuser.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, gameuser.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, gameuser.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, gameuser.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, gameuser.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, gameuser.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, gameuser.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, gameuser.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, gameuser.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, gameuser.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, gameuser.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, gameuser.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, gameuser.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, gameuser.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, gameuser.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, gameuser.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, gameuser.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, gameuser.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, gameuser.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, gameuser.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, gameuser.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, gameuser.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, gameuser.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, gameuser.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, gameuser.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, gameuser.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, gameuser.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, gameuser.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, gameuser.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, gameuser.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, gameuser.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, gameuser.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, gameuser.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, gameuser.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, gameuser.UserIDLTE(*i.UserIDLTE))
	}
	if i.GameID != nil {
		predicates = append(predicates, gameuser.GameIDEQ(*i.GameID))
	}
	if i.GameIDNEQ != nil {
		predicates = append(predicates, gameuser.GameIDNEQ(*i.GameIDNEQ))
	}
	if len(i.GameIDIn) > 0 {
		predicates = append(predicates, gameuser.GameIDIn(i.GameIDIn...))
	}
	if len(i.GameIDNotIn) > 0 {
		predicates = append(predicates, gameuser.GameIDNotIn(i.GameIDNotIn...))
	}
	if i.CardID != nil {
		predicates = append(predicates, gameuser.CardIDEQ(*i.CardID))
	}
	if i.CardIDNEQ != nil {
		predicates = append(predicates, gameuser.CardIDNEQ(*i.CardIDNEQ))
	}
	if len(i.CardIDIn) > 0 {
		predicates = append(predicates, gameuser.CardIDIn(i.CardIDIn...))
	}
	if len(i.CardIDNotIn) > 0 {
		predicates = append(predicates, gameuser.CardIDNotIn(i.CardIDNotIn...))
	}
	if i.Number != nil {
		predicates = append(predicates, gameuser.NumberEQ(*i.Number))
	}
	if i.NumberNEQ != nil {
		predicates = append(predicates, gameuser.NumberNEQ(*i.NumberNEQ))
	}
	if len(i.NumberIn) > 0 {
		predicates = append(predicates, gameuser.NumberIn(i.NumberIn...))
	}
	if len(i.NumberNotIn) > 0 {
		predicates = append(predicates, gameuser.NumberNotIn(i.NumberNotIn...))
	}
	if i.NumberGT != nil {
		predicates = append(predicates, gameuser.NumberGT(*i.NumberGT))
	}
	if i.NumberGTE != nil {
		predicates = append(predicates, gameuser.NumberGTE(*i.NumberGTE))
	}
	if i.NumberLT != nil {
		predicates = append(predicates, gameuser.NumberLT(*i.NumberLT))
	}
	if i.NumberLTE != nil {
		predicates = append(predicates, gameuser.NumberLTE(*i.NumberLTE))
	}

	if i.HasGame != nil {
		p := gameuser.HasGame()
		if !*i.HasGame {
			p = gameuser.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGameWith) > 0 {
		with := make([]predicate.Game, 0, len(i.HasGameWith))
		for _, w := range i.HasGameWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGameWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, gameuser.HasGameWith(with...))
	}
	if i.HasCard != nil {
		p := gameuser.HasCard()
		if !*i.HasCard {
			p = gameuser.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCardWith) > 0 {
		with := make([]predicate.Card, 0, len(i.HasCardWith))
		for _, w := range i.HasCardWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCardWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, gameuser.HasCardWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGameUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return gameuser.And(predicates...), nil
	}
}

// MissionWhereInput represents a where input for filtering Mission queries.
type MissionWhereInput struct {
	Predicates []predicate.Mission  `json:"-"`
	Not        *MissionWhereInput   `json:"not,omitempty"`
	Or         []*MissionWhereInput `json:"or,omitempty"`
	And        []*MissionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int64  `json:"id,omitempty"`
	IDNEQ   *int64  `json:"idNEQ,omitempty"`
	IDIn    []int64 `json:"idIn,omitempty"`
	IDNotIn []int64 `json:"idNotIn,omitempty"`
	IDGT    *int64  `json:"idGT,omitempty"`
	IDGTE   *int64  `json:"idGTE,omitempty"`
	IDLT    *int64  `json:"idLT,omitempty"`
	IDLTE   *int64  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int64  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int64  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int64 `json:"createdByIn,omitempty"`
	CreatedByNotIn []int64 `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int64  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int64  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int64  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int64  `json:"createdByLTE,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy      *int64  `json:"updatedBy,omitempty"`
	UpdatedByNEQ   *int64  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn    []int64 `json:"updatedByIn,omitempty"`
	UpdatedByNotIn []int64 `json:"updatedByNotIn,omitempty"`
	UpdatedByGT    *int64  `json:"updatedByGT,omitempty"`
	UpdatedByGTE   *int64  `json:"updatedByGTE,omitempty"`
	UpdatedByLT    *int64  `json:"updatedByLT,omitempty"`
	UpdatedByLTE   *int64  `json:"updatedByLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt      *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ   *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn    []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT    *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE   *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT    *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE   *time.Time  `json:"deletedAtLTE,omitempty"`

	// "sequence" field predicates.
	Sequence      *uint8  `json:"sequence,omitempty"`
	SequenceNEQ   *uint8  `json:"sequenceNEQ,omitempty"`
	SequenceIn    []uint8 `json:"sequenceIn,omitempty"`
	SequenceNotIn []uint8 `json:"sequenceNotIn,omitempty"`
	SequenceGT    *uint8  `json:"sequenceGT,omitempty"`
	SequenceGTE   *uint8  `json:"sequenceGTE,omitempty"`
	SequenceLT    *uint8  `json:"sequenceLT,omitempty"`
	SequenceLTE   *uint8  `json:"sequenceLTE,omitempty"`

	// "status" field predicates.
	Status      *mission.Status  `json:"status,omitempty"`
	StatusNEQ   *mission.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []mission.Status `json:"statusIn,omitempty"`
	StatusNotIn []mission.Status `json:"statusNotIn,omitempty"`

	// "failed" field predicates.
	Failed    *bool `json:"failed,omitempty"`
	FailedNEQ *bool `json:"failedNEQ,omitempty"`

	// "game_id" field predicates.
	GameID      *int64  `json:"gameID,omitempty"`
	GameIDNEQ   *int64  `json:"gameIDNEQ,omitempty"`
	GameIDIn    []int64 `json:"gameIDIn,omitempty"`
	GameIDNotIn []int64 `json:"gameIDNotIn,omitempty"`

	// "capacity" field predicates.
	Capacity      *uint8  `json:"capacity,omitempty"`
	CapacityNEQ   *uint8  `json:"capacityNEQ,omitempty"`
	CapacityIn    []uint8 `json:"capacityIn,omitempty"`
	CapacityNotIn []uint8 `json:"capacityNotIn,omitempty"`
	CapacityGT    *uint8  `json:"capacityGT,omitempty"`
	CapacityGTE   *uint8  `json:"capacityGTE,omitempty"`
	CapacityLT    *uint8  `json:"capacityLT,omitempty"`
	CapacityLTE   *uint8  `json:"capacityLTE,omitempty"`

	// "leader_id" field predicates.
	LeaderID      *int64  `json:"leaderID,omitempty"`
	LeaderIDNEQ   *int64  `json:"leaderIDNEQ,omitempty"`
	LeaderIDIn    []int64 `json:"leaderIDIn,omitempty"`
	LeaderIDNotIn []int64 `json:"leaderIDNotIn,omitempty"`
	LeaderIDGT    *int64  `json:"leaderIDGT,omitempty"`
	LeaderIDGTE   *int64  `json:"leaderIDGTE,omitempty"`
	LeaderIDLT    *int64  `json:"leaderIDLT,omitempty"`
	LeaderIDLTE   *int64  `json:"leaderIDLTE,omitempty"`

	// "protected" field predicates.
	Protected    *bool `json:"protected,omitempty"`
	ProtectedNEQ *bool `json:"protectedNEQ,omitempty"`

	// "game" edge predicates.
	HasGame     *bool             `json:"hasGame,omitempty"`
	HasGameWith []*GameWhereInput `json:"hasGameWith,omitempty"`

	// "squads" edge predicates.
	HasSquads     *bool              `json:"hasSquads,omitempty"`
	HasSquadsWith []*SquadWhereInput `json:"hasSquadsWith,omitempty"`

	// "votes" edge predicates.
	HasVotes     *bool             `json:"hasVotes,omitempty"`
	HasVotesWith []*VoteWhereInput `json:"hasVotesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MissionWhereInput) AddPredicates(predicates ...predicate.Mission) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MissionWhereInput filter on the MissionQuery builder.
func (i *MissionWhereInput) Filter(q *MissionQuery) (*MissionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMissionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMissionWhereInput is returned in case the MissionWhereInput is empty.
var ErrEmptyMissionWhereInput = errors.New("ent: empty predicate MissionWhereInput")

// P returns a predicate for filtering missions.
// An error is returned if the input is empty or invalid.
func (i *MissionWhereInput) P() (predicate.Mission, error) {
	var predicates []predicate.Mission
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, mission.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Mission, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, mission.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Mission, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, mission.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, mission.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, mission.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, mission.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, mission.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, mission.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, mission.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, mission.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, mission.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, mission.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, mission.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, mission.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, mission.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, mission.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, mission.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, mission.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, mission.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, mission.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, mission.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, mission.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, mission.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, mission.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, mission.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, mission.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, mission.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, mission.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, mission.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, mission.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, mission.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, mission.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, mission.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, mission.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, mission.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, mission.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, mission.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, mission.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, mission.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, mission.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, mission.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, mission.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, mission.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, mission.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, mission.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, mission.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, mission.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, mission.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, mission.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, mission.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, mission.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.Sequence != nil {
		predicates = append(predicates, mission.SequenceEQ(*i.Sequence))
	}
	if i.SequenceNEQ != nil {
		predicates = append(predicates, mission.SequenceNEQ(*i.SequenceNEQ))
	}
	if len(i.SequenceIn) > 0 {
		predicates = append(predicates, mission.SequenceIn(i.SequenceIn...))
	}
	if len(i.SequenceNotIn) > 0 {
		predicates = append(predicates, mission.SequenceNotIn(i.SequenceNotIn...))
	}
	if i.SequenceGT != nil {
		predicates = append(predicates, mission.SequenceGT(*i.SequenceGT))
	}
	if i.SequenceGTE != nil {
		predicates = append(predicates, mission.SequenceGTE(*i.SequenceGTE))
	}
	if i.SequenceLT != nil {
		predicates = append(predicates, mission.SequenceLT(*i.SequenceLT))
	}
	if i.SequenceLTE != nil {
		predicates = append(predicates, mission.SequenceLTE(*i.SequenceLTE))
	}
	if i.Status != nil {
		predicates = append(predicates, mission.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, mission.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, mission.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, mission.StatusNotIn(i.StatusNotIn...))
	}
	if i.Failed != nil {
		predicates = append(predicates, mission.FailedEQ(*i.Failed))
	}
	if i.FailedNEQ != nil {
		predicates = append(predicates, mission.FailedNEQ(*i.FailedNEQ))
	}
	if i.GameID != nil {
		predicates = append(predicates, mission.GameIDEQ(*i.GameID))
	}
	if i.GameIDNEQ != nil {
		predicates = append(predicates, mission.GameIDNEQ(*i.GameIDNEQ))
	}
	if len(i.GameIDIn) > 0 {
		predicates = append(predicates, mission.GameIDIn(i.GameIDIn...))
	}
	if len(i.GameIDNotIn) > 0 {
		predicates = append(predicates, mission.GameIDNotIn(i.GameIDNotIn...))
	}
	if i.Capacity != nil {
		predicates = append(predicates, mission.CapacityEQ(*i.Capacity))
	}
	if i.CapacityNEQ != nil {
		predicates = append(predicates, mission.CapacityNEQ(*i.CapacityNEQ))
	}
	if len(i.CapacityIn) > 0 {
		predicates = append(predicates, mission.CapacityIn(i.CapacityIn...))
	}
	if len(i.CapacityNotIn) > 0 {
		predicates = append(predicates, mission.CapacityNotIn(i.CapacityNotIn...))
	}
	if i.CapacityGT != nil {
		predicates = append(predicates, mission.CapacityGT(*i.CapacityGT))
	}
	if i.CapacityGTE != nil {
		predicates = append(predicates, mission.CapacityGTE(*i.CapacityGTE))
	}
	if i.CapacityLT != nil {
		predicates = append(predicates, mission.CapacityLT(*i.CapacityLT))
	}
	if i.CapacityLTE != nil {
		predicates = append(predicates, mission.CapacityLTE(*i.CapacityLTE))
	}
	if i.LeaderID != nil {
		predicates = append(predicates, mission.LeaderIDEQ(*i.LeaderID))
	}
	if i.LeaderIDNEQ != nil {
		predicates = append(predicates, mission.LeaderIDNEQ(*i.LeaderIDNEQ))
	}
	if len(i.LeaderIDIn) > 0 {
		predicates = append(predicates, mission.LeaderIDIn(i.LeaderIDIn...))
	}
	if len(i.LeaderIDNotIn) > 0 {
		predicates = append(predicates, mission.LeaderIDNotIn(i.LeaderIDNotIn...))
	}
	if i.LeaderIDGT != nil {
		predicates = append(predicates, mission.LeaderIDGT(*i.LeaderIDGT))
	}
	if i.LeaderIDGTE != nil {
		predicates = append(predicates, mission.LeaderIDGTE(*i.LeaderIDGTE))
	}
	if i.LeaderIDLT != nil {
		predicates = append(predicates, mission.LeaderIDLT(*i.LeaderIDLT))
	}
	if i.LeaderIDLTE != nil {
		predicates = append(predicates, mission.LeaderIDLTE(*i.LeaderIDLTE))
	}
	if i.Protected != nil {
		predicates = append(predicates, mission.ProtectedEQ(*i.Protected))
	}
	if i.ProtectedNEQ != nil {
		predicates = append(predicates, mission.ProtectedNEQ(*i.ProtectedNEQ))
	}

	if i.HasGame != nil {
		p := mission.HasGame()
		if !*i.HasGame {
			p = mission.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGameWith) > 0 {
		with := make([]predicate.Game, 0, len(i.HasGameWith))
		for _, w := range i.HasGameWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGameWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, mission.HasGameWith(with...))
	}
	if i.HasSquads != nil {
		p := mission.HasSquads()
		if !*i.HasSquads {
			p = mission.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSquadsWith) > 0 {
		with := make([]predicate.Squad, 0, len(i.HasSquadsWith))
		for _, w := range i.HasSquadsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSquadsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, mission.HasSquadsWith(with...))
	}
	if i.HasVotes != nil {
		p := mission.HasVotes()
		if !*i.HasVotes {
			p = mission.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasVotesWith) > 0 {
		with := make([]predicate.Vote, 0, len(i.HasVotesWith))
		for _, w := range i.HasVotesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasVotesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, mission.HasVotesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMissionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return mission.And(predicates...), nil
	}
}

// RecordWhereInput represents a where input for filtering Record queries.
type RecordWhereInput struct {
	Predicates []predicate.Record  `json:"-"`
	Not        *RecordWhereInput   `json:"not,omitempty"`
	Or         []*RecordWhereInput `json:"or,omitempty"`
	And        []*RecordWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int64  `json:"id,omitempty"`
	IDNEQ   *int64  `json:"idNEQ,omitempty"`
	IDIn    []int64 `json:"idIn,omitempty"`
	IDNotIn []int64 `json:"idNotIn,omitempty"`
	IDGT    *int64  `json:"idGT,omitempty"`
	IDGTE   *int64  `json:"idGTE,omitempty"`
	IDLT    *int64  `json:"idLT,omitempty"`
	IDLTE   *int64  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int64  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int64  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int64 `json:"createdByIn,omitempty"`
	CreatedByNotIn []int64 `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int64  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int64  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int64  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int64  `json:"createdByLTE,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy      *int64  `json:"updatedBy,omitempty"`
	UpdatedByNEQ   *int64  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn    []int64 `json:"updatedByIn,omitempty"`
	UpdatedByNotIn []int64 `json:"updatedByNotIn,omitempty"`
	UpdatedByGT    *int64  `json:"updatedByGT,omitempty"`
	UpdatedByGTE   *int64  `json:"updatedByGTE,omitempty"`
	UpdatedByLT    *int64  `json:"updatedByLT,omitempty"`
	UpdatedByLTE   *int64  `json:"updatedByLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt      *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ   *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn    []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT    *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE   *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT    *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE   *time.Time  `json:"deletedAtLTE,omitempty"`

	// "user_id" field predicates.
	UserID      *int64  `json:"userID,omitempty"`
	UserIDNEQ   *int64  `json:"userIDNEQ,omitempty"`
	UserIDIn    []int64 `json:"userIDIn,omitempty"`
	UserIDNotIn []int64 `json:"userIDNotIn,omitempty"`
	UserIDGT    *int64  `json:"userIDGT,omitempty"`
	UserIDGTE   *int64  `json:"userIDGTE,omitempty"`
	UserIDLT    *int64  `json:"userIDLT,omitempty"`
	UserIDLTE   *int64  `json:"userIDLTE,omitempty"`

	// "room_id" field predicates.
	RoomID      *int64  `json:"roomID,omitempty"`
	RoomIDNEQ   *int64  `json:"roomIDNEQ,omitempty"`
	RoomIDIn    []int64 `json:"roomIDIn,omitempty"`
	RoomIDNotIn []int64 `json:"roomIDNotIn,omitempty"`

	// "score" field predicates.
	Score      *int32  `json:"score,omitempty"`
	ScoreNEQ   *int32  `json:"scoreNEQ,omitempty"`
	ScoreIn    []int32 `json:"scoreIn,omitempty"`
	ScoreNotIn []int32 `json:"scoreNotIn,omitempty"`
	ScoreGT    *int32  `json:"scoreGT,omitempty"`
	ScoreGTE   *int32  `json:"scoreGTE,omitempty"`
	ScoreLT    *int32  `json:"scoreLT,omitempty"`
	ScoreLTE   *int32  `json:"scoreLTE,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *RecordWhereInput) AddPredicates(predicates ...predicate.Record) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the RecordWhereInput filter on the RecordQuery builder.
func (i *RecordWhereInput) Filter(q *RecordQuery) (*RecordQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyRecordWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyRecordWhereInput is returned in case the RecordWhereInput is empty.
var ErrEmptyRecordWhereInput = errors.New("ent: empty predicate RecordWhereInput")

// P returns a predicate for filtering records.
// An error is returned if the input is empty or invalid.
func (i *RecordWhereInput) P() (predicate.Record, error) {
	var predicates []predicate.Record
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, record.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Record, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, record.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Record, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, record.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, record.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, record.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, record.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, record.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, record.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, record.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, record.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, record.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, record.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, record.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, record.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, record.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, record.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, record.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, record.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, record.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, record.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, record.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, record.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, record.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, record.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, record.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, record.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, record.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, record.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, record.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, record.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, record.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, record.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, record.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, record.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, record.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, record.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, record.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, record.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, record.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, record.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, record.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, record.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, record.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, record.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, record.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, record.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, record.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, record.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, record.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, record.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, record.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, record.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, record.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, record.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, record.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, record.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, record.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, record.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, record.UserIDLTE(*i.UserIDLTE))
	}
	if i.RoomID != nil {
		predicates = append(predicates, record.RoomIDEQ(*i.RoomID))
	}
	if i.RoomIDNEQ != nil {
		predicates = append(predicates, record.RoomIDNEQ(*i.RoomIDNEQ))
	}
	if len(i.RoomIDIn) > 0 {
		predicates = append(predicates, record.RoomIDIn(i.RoomIDIn...))
	}
	if len(i.RoomIDNotIn) > 0 {
		predicates = append(predicates, record.RoomIDNotIn(i.RoomIDNotIn...))
	}
	if i.Score != nil {
		predicates = append(predicates, record.ScoreEQ(*i.Score))
	}
	if i.ScoreNEQ != nil {
		predicates = append(predicates, record.ScoreNEQ(*i.ScoreNEQ))
	}
	if len(i.ScoreIn) > 0 {
		predicates = append(predicates, record.ScoreIn(i.ScoreIn...))
	}
	if len(i.ScoreNotIn) > 0 {
		predicates = append(predicates, record.ScoreNotIn(i.ScoreNotIn...))
	}
	if i.ScoreGT != nil {
		predicates = append(predicates, record.ScoreGT(*i.ScoreGT))
	}
	if i.ScoreGTE != nil {
		predicates = append(predicates, record.ScoreGTE(*i.ScoreGTE))
	}
	if i.ScoreLT != nil {
		predicates = append(predicates, record.ScoreLT(*i.ScoreLT))
	}
	if i.ScoreLTE != nil {
		predicates = append(predicates, record.ScoreLTE(*i.ScoreLTE))
	}

	if i.HasRoom != nil {
		p := record.HasRoom()
		if !*i.HasRoom {
			p = record.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, record.HasRoomWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyRecordWhereInput
	case 1:
		return predicates[0], nil
	default:
		return record.And(predicates...), nil
	}
}

// RoomWhereInput represents a where input for filtering Room queries.
type RoomWhereInput struct {
	Predicates []predicate.Room  `json:"-"`
	Not        *RoomWhereInput   `json:"not,omitempty"`
	Or         []*RoomWhereInput `json:"or,omitempty"`
	And        []*RoomWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int64  `json:"id,omitempty"`
	IDNEQ   *int64  `json:"idNEQ,omitempty"`
	IDIn    []int64 `json:"idIn,omitempty"`
	IDNotIn []int64 `json:"idNotIn,omitempty"`
	IDGT    *int64  `json:"idGT,omitempty"`
	IDGTE   *int64  `json:"idGTE,omitempty"`
	IDLT    *int64  `json:"idLT,omitempty"`
	IDLTE   *int64  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int64  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int64  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int64 `json:"createdByIn,omitempty"`
	CreatedByNotIn []int64 `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int64  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int64  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int64  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int64  `json:"createdByLTE,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy      *int64  `json:"updatedBy,omitempty"`
	UpdatedByNEQ   *int64  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn    []int64 `json:"updatedByIn,omitempty"`
	UpdatedByNotIn []int64 `json:"updatedByNotIn,omitempty"`
	UpdatedByGT    *int64  `json:"updatedByGT,omitempty"`
	UpdatedByGTE   *int64  `json:"updatedByGTE,omitempty"`
	UpdatedByLT    *int64  `json:"updatedByLT,omitempty"`
	UpdatedByLTE   *int64  `json:"updatedByLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt      *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ   *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn    []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT    *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE   *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT    *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE   *time.Time  `json:"deletedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "closed" field predicates.
	Closed    *bool `json:"closed,omitempty"`
	ClosedNEQ *bool `json:"closedNEQ,omitempty"`

	// "game_on" field predicates.
	GameOn    *bool `json:"gameOn,omitempty"`
	GameOnNEQ *bool `json:"gameOnNEQ,omitempty"`

	// "room_users" edge predicates.
	HasRoomUsers     *bool                 `json:"hasRoomUsers,omitempty"`
	HasRoomUsersWith []*RoomUserWhereInput `json:"hasRoomUsersWith,omitempty"`

	// "games" edge predicates.
	HasGames     *bool             `json:"hasGames,omitempty"`
	HasGamesWith []*GameWhereInput `json:"hasGamesWith,omitempty"`

	// "records" edge predicates.
	HasRecords     *bool               `json:"hasRecords,omitempty"`
	HasRecordsWith []*RecordWhereInput `json:"hasRecordsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *RoomWhereInput) AddPredicates(predicates ...predicate.Room) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the RoomWhereInput filter on the RoomQuery builder.
func (i *RoomWhereInput) Filter(q *RoomQuery) (*RoomQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyRoomWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyRoomWhereInput is returned in case the RoomWhereInput is empty.
var ErrEmptyRoomWhereInput = errors.New("ent: empty predicate RoomWhereInput")

// P returns a predicate for filtering rooms.
// An error is returned if the input is empty or invalid.
func (i *RoomWhereInput) P() (predicate.Room, error) {
	var predicates []predicate.Room
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, room.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Room, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, room.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Room, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, room.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, room.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, room.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, room.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, room.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, room.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, room.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, room.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, room.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, room.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, room.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, room.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, room.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, room.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, room.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, room.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, room.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, room.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, room.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, room.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, room.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, room.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, room.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, room.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, room.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, room.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, room.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, room.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, room.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, room.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, room.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, room.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, room.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, room.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, room.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, room.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, room.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, room.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, room.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, room.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, room.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, room.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, room.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, room.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, room.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, room.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, room.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, room.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, room.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, room.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, room.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, room.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, room.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, room.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, room.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, room.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, room.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, room.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, room.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, room.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, room.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, room.NameContainsFold(*i.NameContainsFold))
	}
	if i.Closed != nil {
		predicates = append(predicates, room.ClosedEQ(*i.Closed))
	}
	if i.ClosedNEQ != nil {
		predicates = append(predicates, room.ClosedNEQ(*i.ClosedNEQ))
	}
	if i.GameOn != nil {
		predicates = append(predicates, room.GameOnEQ(*i.GameOn))
	}
	if i.GameOnNEQ != nil {
		predicates = append(predicates, room.GameOnNEQ(*i.GameOnNEQ))
	}

	if i.HasRoomUsers != nil {
		p := room.HasRoomUsers()
		if !*i.HasRoomUsers {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomUsersWith) > 0 {
		with := make([]predicate.RoomUser, 0, len(i.HasRoomUsersWith))
		for _, w := range i.HasRoomUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasRoomUsersWith(with...))
	}
	if i.HasGames != nil {
		p := room.HasGames()
		if !*i.HasGames {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGamesWith) > 0 {
		with := make([]predicate.Game, 0, len(i.HasGamesWith))
		for _, w := range i.HasGamesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGamesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasGamesWith(with...))
	}
	if i.HasRecords != nil {
		p := room.HasRecords()
		if !*i.HasRecords {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRecordsWith) > 0 {
		with := make([]predicate.Record, 0, len(i.HasRecordsWith))
		for _, w := range i.HasRecordsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRecordsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasRecordsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyRoomWhereInput
	case 1:
		return predicates[0], nil
	default:
		return room.And(predicates...), nil
	}
}

// RoomUserWhereInput represents a where input for filtering RoomUser queries.
type RoomUserWhereInput struct {
	Predicates []predicate.RoomUser  `json:"-"`
	Not        *RoomUserWhereInput   `json:"not,omitempty"`
	Or         []*RoomUserWhereInput `json:"or,omitempty"`
	And        []*RoomUserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int64  `json:"id,omitempty"`
	IDNEQ   *int64  `json:"idNEQ,omitempty"`
	IDIn    []int64 `json:"idIn,omitempty"`
	IDNotIn []int64 `json:"idNotIn,omitempty"`
	IDGT    *int64  `json:"idGT,omitempty"`
	IDGTE   *int64  `json:"idGTE,omitempty"`
	IDLT    *int64  `json:"idLT,omitempty"`
	IDLTE   *int64  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int64  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int64  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int64 `json:"createdByIn,omitempty"`
	CreatedByNotIn []int64 `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int64  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int64  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int64  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int64  `json:"createdByLTE,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy      *int64  `json:"updatedBy,omitempty"`
	UpdatedByNEQ   *int64  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn    []int64 `json:"updatedByIn,omitempty"`
	UpdatedByNotIn []int64 `json:"updatedByNotIn,omitempty"`
	UpdatedByGT    *int64  `json:"updatedByGT,omitempty"`
	UpdatedByGTE   *int64  `json:"updatedByGTE,omitempty"`
	UpdatedByLT    *int64  `json:"updatedByLT,omitempty"`
	UpdatedByLTE   *int64  `json:"updatedByLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt      *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ   *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn    []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT    *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE   *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT    *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE   *time.Time  `json:"deletedAtLTE,omitempty"`

	// "user_id" field predicates.
	UserID      *int64  `json:"userID,omitempty"`
	UserIDNEQ   *int64  `json:"userIDNEQ,omitempty"`
	UserIDIn    []int64 `json:"userIDIn,omitempty"`
	UserIDNotIn []int64 `json:"userIDNotIn,omitempty"`
	UserIDGT    *int64  `json:"userIDGT,omitempty"`
	UserIDGTE   *int64  `json:"userIDGTE,omitempty"`
	UserIDLT    *int64  `json:"userIDLT,omitempty"`
	UserIDLTE   *int64  `json:"userIDLTE,omitempty"`

	// "room_id" field predicates.
	RoomID      *int64  `json:"roomID,omitempty"`
	RoomIDNEQ   *int64  `json:"roomIDNEQ,omitempty"`
	RoomIDIn    []int64 `json:"roomIDIn,omitempty"`
	RoomIDNotIn []int64 `json:"roomIDNotIn,omitempty"`

	// "host" field predicates.
	Host    *bool `json:"host,omitempty"`
	HostNEQ *bool `json:"hostNEQ,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *RoomUserWhereInput) AddPredicates(predicates ...predicate.RoomUser) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the RoomUserWhereInput filter on the RoomUserQuery builder.
func (i *RoomUserWhereInput) Filter(q *RoomUserQuery) (*RoomUserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyRoomUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyRoomUserWhereInput is returned in case the RoomUserWhereInput is empty.
var ErrEmptyRoomUserWhereInput = errors.New("ent: empty predicate RoomUserWhereInput")

// P returns a predicate for filtering roomusers.
// An error is returned if the input is empty or invalid.
func (i *RoomUserWhereInput) P() (predicate.RoomUser, error) {
	var predicates []predicate.RoomUser
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, roomuser.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.RoomUser, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, roomuser.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.RoomUser, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, roomuser.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, roomuser.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, roomuser.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, roomuser.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, roomuser.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, roomuser.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, roomuser.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, roomuser.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, roomuser.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, roomuser.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, roomuser.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, roomuser.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, roomuser.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, roomuser.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, roomuser.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, roomuser.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, roomuser.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, roomuser.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, roomuser.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, roomuser.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, roomuser.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, roomuser.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, roomuser.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, roomuser.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, roomuser.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, roomuser.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, roomuser.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, roomuser.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, roomuser.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, roomuser.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, roomuser.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, roomuser.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, roomuser.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, roomuser.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, roomuser.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, roomuser.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, roomuser.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, roomuser.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, roomuser.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, roomuser.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, roomuser.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, roomuser.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, roomuser.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, roomuser.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, roomuser.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, roomuser.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, roomuser.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, roomuser.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, roomuser.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, roomuser.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, roomuser.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, roomuser.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, roomuser.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, roomuser.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, roomuser.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, roomuser.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, roomuser.UserIDLTE(*i.UserIDLTE))
	}
	if i.RoomID != nil {
		predicates = append(predicates, roomuser.RoomIDEQ(*i.RoomID))
	}
	if i.RoomIDNEQ != nil {
		predicates = append(predicates, roomuser.RoomIDNEQ(*i.RoomIDNEQ))
	}
	if len(i.RoomIDIn) > 0 {
		predicates = append(predicates, roomuser.RoomIDIn(i.RoomIDIn...))
	}
	if len(i.RoomIDNotIn) > 0 {
		predicates = append(predicates, roomuser.RoomIDNotIn(i.RoomIDNotIn...))
	}
	if i.Host != nil {
		predicates = append(predicates, roomuser.HostEQ(*i.Host))
	}
	if i.HostNEQ != nil {
		predicates = append(predicates, roomuser.HostNEQ(*i.HostNEQ))
	}

	if i.HasRoom != nil {
		p := roomuser.HasRoom()
		if !*i.HasRoom {
			p = roomuser.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, roomuser.HasRoomWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyRoomUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return roomuser.And(predicates...), nil
	}
}

// SquadWhereInput represents a where input for filtering Squad queries.
type SquadWhereInput struct {
	Predicates []predicate.Squad  `json:"-"`
	Not        *SquadWhereInput   `json:"not,omitempty"`
	Or         []*SquadWhereInput `json:"or,omitempty"`
	And        []*SquadWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int64  `json:"id,omitempty"`
	IDNEQ   *int64  `json:"idNEQ,omitempty"`
	IDIn    []int64 `json:"idIn,omitempty"`
	IDNotIn []int64 `json:"idNotIn,omitempty"`
	IDGT    *int64  `json:"idGT,omitempty"`
	IDGTE   *int64  `json:"idGTE,omitempty"`
	IDLT    *int64  `json:"idLT,omitempty"`
	IDLTE   *int64  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int64  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int64  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int64 `json:"createdByIn,omitempty"`
	CreatedByNotIn []int64 `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int64  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int64  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int64  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int64  `json:"createdByLTE,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy      *int64  `json:"updatedBy,omitempty"`
	UpdatedByNEQ   *int64  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn    []int64 `json:"updatedByIn,omitempty"`
	UpdatedByNotIn []int64 `json:"updatedByNotIn,omitempty"`
	UpdatedByGT    *int64  `json:"updatedByGT,omitempty"`
	UpdatedByGTE   *int64  `json:"updatedByGTE,omitempty"`
	UpdatedByLT    *int64  `json:"updatedByLT,omitempty"`
	UpdatedByLTE   *int64  `json:"updatedByLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt      *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ   *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn    []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT    *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE   *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT    *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE   *time.Time  `json:"deletedAtLTE,omitempty"`

	// "mission_id" field predicates.
	MissionID      *int64  `json:"missionID,omitempty"`
	MissionIDNEQ   *int64  `json:"missionIDNEQ,omitempty"`
	MissionIDIn    []int64 `json:"missionIDIn,omitempty"`
	MissionIDNotIn []int64 `json:"missionIDNotIn,omitempty"`

	// "user_id" field predicates.
	UserID      *int64  `json:"userID,omitempty"`
	UserIDNEQ   *int64  `json:"userIDNEQ,omitempty"`
	UserIDIn    []int64 `json:"userIDIn,omitempty"`
	UserIDNotIn []int64 `json:"userIDNotIn,omitempty"`
	UserIDGT    *int64  `json:"userIDGT,omitempty"`
	UserIDGTE   *int64  `json:"userIDGTE,omitempty"`
	UserIDLT    *int64  `json:"userIDLT,omitempty"`
	UserIDLTE   *int64  `json:"userIDLTE,omitempty"`

	// "rat" field predicates.
	Rat    *bool `json:"rat,omitempty"`
	RatNEQ *bool `json:"ratNEQ,omitempty"`

	// "acted" field predicates.
	Acted    *bool `json:"acted,omitempty"`
	ActedNEQ *bool `json:"actedNEQ,omitempty"`

	// "mission" edge predicates.
	HasMission     *bool                `json:"hasMission,omitempty"`
	HasMissionWith []*MissionWhereInput `json:"hasMissionWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *SquadWhereInput) AddPredicates(predicates ...predicate.Squad) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the SquadWhereInput filter on the SquadQuery builder.
func (i *SquadWhereInput) Filter(q *SquadQuery) (*SquadQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptySquadWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptySquadWhereInput is returned in case the SquadWhereInput is empty.
var ErrEmptySquadWhereInput = errors.New("ent: empty predicate SquadWhereInput")

// P returns a predicate for filtering squads.
// An error is returned if the input is empty or invalid.
func (i *SquadWhereInput) P() (predicate.Squad, error) {
	var predicates []predicate.Squad
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, squad.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Squad, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, squad.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Squad, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, squad.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, squad.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, squad.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, squad.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, squad.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, squad.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, squad.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, squad.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, squad.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, squad.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, squad.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, squad.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, squad.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, squad.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, squad.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, squad.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, squad.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, squad.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, squad.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, squad.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, squad.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, squad.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, squad.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, squad.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, squad.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, squad.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, squad.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, squad.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, squad.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, squad.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, squad.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, squad.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, squad.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, squad.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, squad.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, squad.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, squad.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, squad.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, squad.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, squad.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, squad.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, squad.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, squad.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, squad.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, squad.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, squad.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, squad.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, squad.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, squad.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.MissionID != nil {
		predicates = append(predicates, squad.MissionIDEQ(*i.MissionID))
	}
	if i.MissionIDNEQ != nil {
		predicates = append(predicates, squad.MissionIDNEQ(*i.MissionIDNEQ))
	}
	if len(i.MissionIDIn) > 0 {
		predicates = append(predicates, squad.MissionIDIn(i.MissionIDIn...))
	}
	if len(i.MissionIDNotIn) > 0 {
		predicates = append(predicates, squad.MissionIDNotIn(i.MissionIDNotIn...))
	}
	if i.UserID != nil {
		predicates = append(predicates, squad.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, squad.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, squad.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, squad.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, squad.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, squad.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, squad.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, squad.UserIDLTE(*i.UserIDLTE))
	}
	if i.Rat != nil {
		predicates = append(predicates, squad.RatEQ(*i.Rat))
	}
	if i.RatNEQ != nil {
		predicates = append(predicates, squad.RatNEQ(*i.RatNEQ))
	}
	if i.Acted != nil {
		predicates = append(predicates, squad.ActedEQ(*i.Acted))
	}
	if i.ActedNEQ != nil {
		predicates = append(predicates, squad.ActedNEQ(*i.ActedNEQ))
	}

	if i.HasMission != nil {
		p := squad.HasMission()
		if !*i.HasMission {
			p = squad.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMissionWith) > 0 {
		with := make([]predicate.Mission, 0, len(i.HasMissionWith))
		for _, w := range i.HasMissionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMissionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, squad.HasMissionWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptySquadWhereInput
	case 1:
		return predicates[0], nil
	default:
		return squad.And(predicates...), nil
	}
}

// VoteWhereInput represents a where input for filtering Vote queries.
type VoteWhereInput struct {
	Predicates []predicate.Vote  `json:"-"`
	Not        *VoteWhereInput   `json:"not,omitempty"`
	Or         []*VoteWhereInput `json:"or,omitempty"`
	And        []*VoteWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int64  `json:"id,omitempty"`
	IDNEQ   *int64  `json:"idNEQ,omitempty"`
	IDIn    []int64 `json:"idIn,omitempty"`
	IDNotIn []int64 `json:"idNotIn,omitempty"`
	IDGT    *int64  `json:"idGT,omitempty"`
	IDGTE   *int64  `json:"idGTE,omitempty"`
	IDLT    *int64  `json:"idLT,omitempty"`
	IDLTE   *int64  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int64  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int64  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int64 `json:"createdByIn,omitempty"`
	CreatedByNotIn []int64 `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int64  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int64  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int64  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int64  `json:"createdByLTE,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy      *int64  `json:"updatedBy,omitempty"`
	UpdatedByNEQ   *int64  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn    []int64 `json:"updatedByIn,omitempty"`
	UpdatedByNotIn []int64 `json:"updatedByNotIn,omitempty"`
	UpdatedByGT    *int64  `json:"updatedByGT,omitempty"`
	UpdatedByGTE   *int64  `json:"updatedByGTE,omitempty"`
	UpdatedByLT    *int64  `json:"updatedByLT,omitempty"`
	UpdatedByLTE   *int64  `json:"updatedByLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt      *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ   *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn    []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT    *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE   *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT    *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE   *time.Time  `json:"deletedAtLTE,omitempty"`

	// "mission_id" field predicates.
	MissionID      *int64  `json:"missionID,omitempty"`
	MissionIDNEQ   *int64  `json:"missionIDNEQ,omitempty"`
	MissionIDIn    []int64 `json:"missionIDIn,omitempty"`
	MissionIDNotIn []int64 `json:"missionIDNotIn,omitempty"`

	// "user_id" field predicates.
	UserID      *int64  `json:"userID,omitempty"`
	UserIDNEQ   *int64  `json:"userIDNEQ,omitempty"`
	UserIDIn    []int64 `json:"userIDIn,omitempty"`
	UserIDNotIn []int64 `json:"userIDNotIn,omitempty"`
	UserIDGT    *int64  `json:"userIDGT,omitempty"`
	UserIDGTE   *int64  `json:"userIDGTE,omitempty"`
	UserIDLT    *int64  `json:"userIDLT,omitempty"`
	UserIDLTE   *int64  `json:"userIDLTE,omitempty"`

	// "pass" field predicates.
	Pass    *bool `json:"pass,omitempty"`
	PassNEQ *bool `json:"passNEQ,omitempty"`

	// "voted" field predicates.
	Voted    *bool `json:"voted,omitempty"`
	VotedNEQ *bool `json:"votedNEQ,omitempty"`

	// "mission" edge predicates.
	HasMission     *bool                `json:"hasMission,omitempty"`
	HasMissionWith []*MissionWhereInput `json:"hasMissionWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *VoteWhereInput) AddPredicates(predicates ...predicate.Vote) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the VoteWhereInput filter on the VoteQuery builder.
func (i *VoteWhereInput) Filter(q *VoteQuery) (*VoteQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyVoteWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyVoteWhereInput is returned in case the VoteWhereInput is empty.
var ErrEmptyVoteWhereInput = errors.New("ent: empty predicate VoteWhereInput")

// P returns a predicate for filtering votes.
// An error is returned if the input is empty or invalid.
func (i *VoteWhereInput) P() (predicate.Vote, error) {
	var predicates []predicate.Vote
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, vote.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Vote, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, vote.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Vote, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, vote.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, vote.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, vote.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, vote.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, vote.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, vote.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, vote.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, vote.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, vote.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, vote.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, vote.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, vote.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, vote.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, vote.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, vote.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, vote.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, vote.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, vote.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, vote.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, vote.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, vote.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, vote.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, vote.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, vote.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, vote.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, vote.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, vote.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, vote.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, vote.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, vote.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, vote.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, vote.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, vote.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, vote.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, vote.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, vote.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, vote.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, vote.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, vote.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, vote.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, vote.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, vote.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, vote.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, vote.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, vote.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, vote.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, vote.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, vote.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, vote.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.MissionID != nil {
		predicates = append(predicates, vote.MissionIDEQ(*i.MissionID))
	}
	if i.MissionIDNEQ != nil {
		predicates = append(predicates, vote.MissionIDNEQ(*i.MissionIDNEQ))
	}
	if len(i.MissionIDIn) > 0 {
		predicates = append(predicates, vote.MissionIDIn(i.MissionIDIn...))
	}
	if len(i.MissionIDNotIn) > 0 {
		predicates = append(predicates, vote.MissionIDNotIn(i.MissionIDNotIn...))
	}
	if i.UserID != nil {
		predicates = append(predicates, vote.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, vote.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, vote.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, vote.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, vote.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, vote.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, vote.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, vote.UserIDLTE(*i.UserIDLTE))
	}
	if i.Pass != nil {
		predicates = append(predicates, vote.PassEQ(*i.Pass))
	}
	if i.PassNEQ != nil {
		predicates = append(predicates, vote.PassNEQ(*i.PassNEQ))
	}
	if i.Voted != nil {
		predicates = append(predicates, vote.VotedEQ(*i.Voted))
	}
	if i.VotedNEQ != nil {
		predicates = append(predicates, vote.VotedNEQ(*i.VotedNEQ))
	}

	if i.HasMission != nil {
		p := vote.HasMission()
		if !*i.HasMission {
			p = vote.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMissionWith) > 0 {
		with := make([]predicate.Mission, 0, len(i.HasMissionWith))
		for _, w := range i.HasMissionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMissionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, vote.HasMissionWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyVoteWhereInput
	case 1:
		return predicates[0], nil
	default:
		return vote.And(predicates...), nil
	}
}
