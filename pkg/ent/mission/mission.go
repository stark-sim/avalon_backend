// Code generated by ent, DO NOT EDIT.

package mission

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the mission type in the database.
	Label = "mission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldSequence holds the string denoting the sequence field in the database.
	FieldSequence = "sequence"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFailed holds the string denoting the failed field in the database.
	FieldFailed = "failed"
	// FieldGameID holds the string denoting the game_id field in the database.
	FieldGameID = "game_id"
	// FieldCapacity holds the string denoting the capacity field in the database.
	FieldCapacity = "capacity"
	// FieldLeader holds the string denoting the leader field in the database.
	FieldLeader = "leader"
	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"
	// EdgeSquads holds the string denoting the squads edge name in mutations.
	EdgeSquads = "squads"
	// EdgeVotes holds the string denoting the votes edge name in mutations.
	EdgeVotes = "votes"
	// Table holds the table name of the mission in the database.
	Table = "missions"
	// GameTable is the table that holds the game relation/edge.
	GameTable = "missions"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// GameColumn is the table column denoting the game relation/edge.
	GameColumn = "game_id"
	// SquadsTable is the table that holds the squads relation/edge.
	SquadsTable = "squads"
	// SquadsInverseTable is the table name for the Squad entity.
	// It exists in this package in order to avoid circular dependency with the "squad" package.
	SquadsInverseTable = "squads"
	// SquadsColumn is the table column denoting the squads relation/edge.
	SquadsColumn = "mission_id"
	// VotesTable is the table that holds the votes relation/edge.
	VotesTable = "votes"
	// VotesInverseTable is the table name for the Vote entity.
	// It exists in this package in order to avoid circular dependency with the "vote" package.
	VotesInverseTable = "votes"
	// VotesColumn is the table column denoting the votes relation/edge.
	VotesColumn = "mission_id"
)

// Columns holds all SQL columns for mission fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldSequence,
	FieldStatus,
	FieldFailed,
	FieldGameID,
	FieldCapacity,
	FieldLeader,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedBy holds the default value on creation for the "created_by" field.
	DefaultCreatedBy int64
	// DefaultUpdatedBy holds the default value on creation for the "updated_by" field.
	DefaultUpdatedBy int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt time.Time
	// SequenceValidator is a validator for the "sequence" field. It is called by the builders before save.
	SequenceValidator func(uint8) error
	// DefaultFailed holds the default value on creation for the "failed" field.
	DefaultFailed bool
	// DefaultCapacity holds the default value on creation for the "capacity" field.
	DefaultCapacity uint8
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPicking is the default value of the Status enum.
const DefaultStatus = StatusPicking

// Status values.
const (
	StatusPicking Status = "picking"
	StatusVoting  Status = "voting"
	StatusActing  Status = "acting"
	StatusClosed  Status = "closed"
	StatusDelayed Status = "delayed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPicking, StatusVoting, StatusActing, StatusClosed, StatusDelayed:
		return nil
	default:
		return fmt.Errorf("mission: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
