// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/avalon_backend/pkg/ent/game"
	"github.com/stark-sim/avalon_backend/pkg/ent/mission"
	"github.com/stark-sim/avalon_backend/pkg/ent/squad"
	"github.com/stark-sim/avalon_backend/pkg/ent/vote"
)

// MissionCreate is the builder for creating a Mission entity.
type MissionCreate struct {
	config
	mutation *MissionMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (mc *MissionCreate) SetCreatedBy(i int64) *MissionCreate {
	mc.mutation.SetCreatedBy(i)
	return mc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCreatedBy(i *int64) *MissionCreate {
	if i != nil {
		mc.SetCreatedBy(*i)
	}
	return mc
}

// SetUpdatedBy sets the "updated_by" field.
func (mc *MissionCreate) SetUpdatedBy(i int64) *MissionCreate {
	mc.mutation.SetUpdatedBy(i)
	return mc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUpdatedBy(i *int64) *MissionCreate {
	if i != nil {
		mc.SetUpdatedBy(*i)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MissionCreate) SetCreatedAt(t time.Time) *MissionCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCreatedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MissionCreate) SetUpdatedAt(t time.Time) *MissionCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableUpdatedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MissionCreate) SetDeletedAt(t time.Time) *MissionCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableDeletedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetSequence sets the "sequence" field.
func (mc *MissionCreate) SetSequence(u uint8) *MissionCreate {
	mc.mutation.SetSequence(u)
	return mc
}

// SetStatus sets the "status" field.
func (mc *MissionCreate) SetStatus(m mission.Status) *MissionCreate {
	mc.mutation.SetStatus(m)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MissionCreate) SetNillableStatus(m *mission.Status) *MissionCreate {
	if m != nil {
		mc.SetStatus(*m)
	}
	return mc
}

// SetFailed sets the "failed" field.
func (mc *MissionCreate) SetFailed(b bool) *MissionCreate {
	mc.mutation.SetFailed(b)
	return mc
}

// SetNillableFailed sets the "failed" field if the given value is not nil.
func (mc *MissionCreate) SetNillableFailed(b *bool) *MissionCreate {
	if b != nil {
		mc.SetFailed(*b)
	}
	return mc
}

// SetGameID sets the "game_id" field.
func (mc *MissionCreate) SetGameID(i int64) *MissionCreate {
	mc.mutation.SetGameID(i)
	return mc
}

// SetCapacity sets the "capacity" field.
func (mc *MissionCreate) SetCapacity(u uint8) *MissionCreate {
	mc.mutation.SetCapacity(u)
	return mc
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCapacity(u *uint8) *MissionCreate {
	if u != nil {
		mc.SetCapacity(*u)
	}
	return mc
}

// SetLeader sets the "leader" field.
func (mc *MissionCreate) SetLeader(i int64) *MissionCreate {
	mc.mutation.SetLeader(i)
	return mc
}

// SetID sets the "id" field.
func (mc *MissionCreate) SetID(i int64) *MissionCreate {
	mc.mutation.SetID(i)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MissionCreate) SetNillableID(i *int64) *MissionCreate {
	if i != nil {
		mc.SetID(*i)
	}
	return mc
}

// SetGame sets the "game" edge to the Game entity.
func (mc *MissionCreate) SetGame(g *Game) *MissionCreate {
	return mc.SetGameID(g.ID)
}

// AddSquadIDs adds the "squads" edge to the Squad entity by IDs.
func (mc *MissionCreate) AddSquadIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddSquadIDs(ids...)
	return mc
}

// AddSquads adds the "squads" edges to the Squad entity.
func (mc *MissionCreate) AddSquads(s ...*Squad) *MissionCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mc.AddSquadIDs(ids...)
}

// AddMissionVoteIDs adds the "mission_votes" edge to the Vote entity by IDs.
func (mc *MissionCreate) AddMissionVoteIDs(ids ...int64) *MissionCreate {
	mc.mutation.AddMissionVoteIDs(ids...)
	return mc
}

// AddMissionVotes adds the "mission_votes" edges to the Vote entity.
func (mc *MissionCreate) AddMissionVotes(v ...*Vote) *MissionCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mc.AddMissionVoteIDs(ids...)
}

// Mutation returns the MissionMutation object of the builder.
func (mc *MissionCreate) Mutation() *MissionMutation {
	return mc.mutation
}

// Save creates the Mission in the database.
func (mc *MissionCreate) Save(ctx context.Context) (*Mission, error) {
	var (
		err  error
		node *Mission
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Mission)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MissionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MissionCreate) SaveX(ctx context.Context) *Mission {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MissionCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MissionCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MissionCreate) defaults() {
	if _, ok := mc.mutation.CreatedBy(); !ok {
		v := mission.DefaultCreatedBy
		mc.mutation.SetCreatedBy(v)
	}
	if _, ok := mc.mutation.UpdatedBy(); !ok {
		v := mission.DefaultUpdatedBy
		mc.mutation.SetUpdatedBy(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := mission.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := mission.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		v := mission.DefaultDeletedAt
		mc.mutation.SetDeletedAt(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := mission.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.Failed(); !ok {
		v := mission.DefaultFailed
		mc.mutation.SetFailed(v)
	}
	if _, ok := mc.mutation.Capacity(); !ok {
		v := mission.DefaultCapacity
		mc.mutation.SetCapacity(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := mission.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MissionCreate) check() error {
	if _, ok := mc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Mission.created_by"`)}
	}
	if _, ok := mc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Mission.updated_by"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Mission.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Mission.updated_at"`)}
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Mission.deleted_at"`)}
	}
	if _, ok := mc.mutation.Sequence(); !ok {
		return &ValidationError{Name: "sequence", err: errors.New(`ent: missing required field "Mission.sequence"`)}
	}
	if v, ok := mc.mutation.Sequence(); ok {
		if err := mission.SequenceValidator(v); err != nil {
			return &ValidationError{Name: "sequence", err: fmt.Errorf(`ent: validator failed for field "Mission.sequence": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Mission.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := mission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Mission.status": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Failed(); !ok {
		return &ValidationError{Name: "failed", err: errors.New(`ent: missing required field "Mission.failed"`)}
	}
	if _, ok := mc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game_id", err: errors.New(`ent: missing required field "Mission.game_id"`)}
	}
	if _, ok := mc.mutation.Capacity(); !ok {
		return &ValidationError{Name: "capacity", err: errors.New(`ent: missing required field "Mission.capacity"`)}
	}
	if _, ok := mc.mutation.Leader(); !ok {
		return &ValidationError{Name: "leader", err: errors.New(`ent: missing required field "Mission.leader"`)}
	}
	if _, ok := mc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "Mission.game"`)}
	}
	return nil
}

func (mc *MissionCreate) sqlSave(ctx context.Context) (*Mission, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (mc *MissionCreate) createSpec() (*Mission, *sqlgraph.CreateSpec) {
	var (
		_node = &Mission{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mission.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: mission.FieldID,
			},
		}
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedBy(); ok {
		_spec.SetField(mission.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := mc.mutation.UpdatedBy(); ok {
		_spec.SetField(mission.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(mission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(mission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(mission.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.Sequence(); ok {
		_spec.SetField(mission.FieldSequence, field.TypeUint8, value)
		_node.Sequence = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(mission.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Failed(); ok {
		_spec.SetField(mission.FieldFailed, field.TypeBool, value)
		_node.Failed = value
	}
	if value, ok := mc.mutation.Capacity(); ok {
		_spec.SetField(mission.FieldCapacity, field.TypeUint8, value)
		_node.Capacity = value
	}
	if value, ok := mc.mutation.Leader(); ok {
		_spec.SetField(mission.FieldLeader, field.TypeInt64, value)
		_node.Leader = value
	}
	if nodes := mc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mission.GameTable,
			Columns: []string{mission.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GameID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.SquadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.SquadsTable,
			Columns: []string{mission.SquadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: squad.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MissionVotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mission.MissionVotesTable,
			Columns: []string{mission.MissionVotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: vote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MissionCreateBulk is the builder for creating many Mission entities in bulk.
type MissionCreateBulk struct {
	config
	builders []*MissionCreate
}

// Save creates the Mission entities in the database.
func (mcb *MissionCreateBulk) Save(ctx context.Context) ([]*Mission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mission, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MissionCreateBulk) SaveX(ctx context.Context) []*Mission {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MissionCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MissionCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
