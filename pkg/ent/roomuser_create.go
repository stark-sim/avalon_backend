// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/avalon_backend/pkg/ent/room"
	"github.com/stark-sim/avalon_backend/pkg/ent/roomuser"
)

// RoomUserCreate is the builder for creating a RoomUser entity.
type RoomUserCreate struct {
	config
	mutation *RoomUserMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (ruc *RoomUserCreate) SetCreatedBy(i int64) *RoomUserCreate {
	ruc.mutation.SetCreatedBy(i)
	return ruc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ruc *RoomUserCreate) SetNillableCreatedBy(i *int64) *RoomUserCreate {
	if i != nil {
		ruc.SetCreatedBy(*i)
	}
	return ruc
}

// SetUpdatedBy sets the "updated_by" field.
func (ruc *RoomUserCreate) SetUpdatedBy(i int64) *RoomUserCreate {
	ruc.mutation.SetUpdatedBy(i)
	return ruc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruc *RoomUserCreate) SetNillableUpdatedBy(i *int64) *RoomUserCreate {
	if i != nil {
		ruc.SetUpdatedBy(*i)
	}
	return ruc
}

// SetCreatedAt sets the "created_at" field.
func (ruc *RoomUserCreate) SetCreatedAt(t time.Time) *RoomUserCreate {
	ruc.mutation.SetCreatedAt(t)
	return ruc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruc *RoomUserCreate) SetNillableCreatedAt(t *time.Time) *RoomUserCreate {
	if t != nil {
		ruc.SetCreatedAt(*t)
	}
	return ruc
}

// SetUpdatedAt sets the "updated_at" field.
func (ruc *RoomUserCreate) SetUpdatedAt(t time.Time) *RoomUserCreate {
	ruc.mutation.SetUpdatedAt(t)
	return ruc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruc *RoomUserCreate) SetNillableUpdatedAt(t *time.Time) *RoomUserCreate {
	if t != nil {
		ruc.SetUpdatedAt(*t)
	}
	return ruc
}

// SetDeletedAt sets the "deleted_at" field.
func (ruc *RoomUserCreate) SetDeletedAt(t time.Time) *RoomUserCreate {
	ruc.mutation.SetDeletedAt(t)
	return ruc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruc *RoomUserCreate) SetNillableDeletedAt(t *time.Time) *RoomUserCreate {
	if t != nil {
		ruc.SetDeletedAt(*t)
	}
	return ruc
}

// SetUserID sets the "user_id" field.
func (ruc *RoomUserCreate) SetUserID(i int64) *RoomUserCreate {
	ruc.mutation.SetUserID(i)
	return ruc
}

// SetRoomID sets the "room_id" field.
func (ruc *RoomUserCreate) SetRoomID(i int64) *RoomUserCreate {
	ruc.mutation.SetRoomID(i)
	return ruc
}

// SetID sets the "id" field.
func (ruc *RoomUserCreate) SetID(i int64) *RoomUserCreate {
	ruc.mutation.SetID(i)
	return ruc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ruc *RoomUserCreate) SetNillableID(i *int64) *RoomUserCreate {
	if i != nil {
		ruc.SetID(*i)
	}
	return ruc
}

// SetRoom sets the "room" edge to the Room entity.
func (ruc *RoomUserCreate) SetRoom(r *Room) *RoomUserCreate {
	return ruc.SetRoomID(r.ID)
}

// Mutation returns the RoomUserMutation object of the builder.
func (ruc *RoomUserCreate) Mutation() *RoomUserMutation {
	return ruc.mutation
}

// Save creates the RoomUser in the database.
func (ruc *RoomUserCreate) Save(ctx context.Context) (*RoomUser, error) {
	var (
		err  error
		node *RoomUser
	)
	ruc.defaults()
	if len(ruc.hooks) == 0 {
		if err = ruc.check(); err != nil {
			return nil, err
		}
		node, err = ruc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruc.check(); err != nil {
				return nil, err
			}
			ruc.mutation = mutation
			if node, err = ruc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ruc.hooks) - 1; i >= 0; i-- {
			if ruc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RoomUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RoomUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ruc *RoomUserCreate) SaveX(ctx context.Context) *RoomUser {
	v, err := ruc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ruc *RoomUserCreate) Exec(ctx context.Context) error {
	_, err := ruc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruc *RoomUserCreate) ExecX(ctx context.Context) {
	if err := ruc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruc *RoomUserCreate) defaults() {
	if _, ok := ruc.mutation.CreatedBy(); !ok {
		v := roomuser.DefaultCreatedBy
		ruc.mutation.SetCreatedBy(v)
	}
	if _, ok := ruc.mutation.UpdatedBy(); !ok {
		v := roomuser.DefaultUpdatedBy
		ruc.mutation.SetUpdatedBy(v)
	}
	if _, ok := ruc.mutation.CreatedAt(); !ok {
		v := roomuser.DefaultCreatedAt()
		ruc.mutation.SetCreatedAt(v)
	}
	if _, ok := ruc.mutation.UpdatedAt(); !ok {
		v := roomuser.DefaultUpdatedAt()
		ruc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ruc.mutation.DeletedAt(); !ok {
		v := roomuser.DefaultDeletedAt
		ruc.mutation.SetDeletedAt(v)
	}
	if _, ok := ruc.mutation.ID(); !ok {
		v := roomuser.DefaultID()
		ruc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruc *RoomUserCreate) check() error {
	if _, ok := ruc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "RoomUser.created_by"`)}
	}
	if _, ok := ruc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "RoomUser.updated_by"`)}
	}
	if _, ok := ruc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RoomUser.created_at"`)}
	}
	if _, ok := ruc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RoomUser.updated_at"`)}
	}
	if _, ok := ruc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "RoomUser.deleted_at"`)}
	}
	if _, ok := ruc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "RoomUser.user_id"`)}
	}
	if _, ok := ruc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room_id", err: errors.New(`ent: missing required field "RoomUser.room_id"`)}
	}
	if _, ok := ruc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required edge "RoomUser.room"`)}
	}
	return nil
}

func (ruc *RoomUserCreate) sqlSave(ctx context.Context) (*RoomUser, error) {
	_node, _spec := ruc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ruc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ruc *RoomUserCreate) createSpec() (*RoomUser, *sqlgraph.CreateSpec) {
	var (
		_node = &RoomUser{config: ruc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: roomuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: roomuser.FieldID,
			},
		}
	)
	if id, ok := ruc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ruc.mutation.CreatedBy(); ok {
		_spec.SetField(roomuser.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := ruc.mutation.UpdatedBy(); ok {
		_spec.SetField(roomuser.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := ruc.mutation.CreatedAt(); ok {
		_spec.SetField(roomuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ruc.mutation.UpdatedAt(); ok {
		_spec.SetField(roomuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ruc.mutation.DeletedAt(); ok {
		_spec.SetField(roomuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ruc.mutation.UserID(); ok {
		_spec.SetField(roomuser.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if nodes := ruc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.RoomTable,
			Columns: []string{roomuser.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoomID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoomUserCreateBulk is the builder for creating many RoomUser entities in bulk.
type RoomUserCreateBulk struct {
	config
	builders []*RoomUserCreate
}

// Save creates the RoomUser entities in the database.
func (rucb *RoomUserCreateBulk) Save(ctx context.Context) ([]*RoomUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rucb.builders))
	nodes := make([]*RoomUser, len(rucb.builders))
	mutators := make([]Mutator, len(rucb.builders))
	for i := range rucb.builders {
		func(i int, root context.Context) {
			builder := rucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoomUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rucb *RoomUserCreateBulk) SaveX(ctx context.Context) []*RoomUser {
	v, err := rucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rucb *RoomUserCreateBulk) Exec(ctx context.Context) error {
	_, err := rucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rucb *RoomUserCreateBulk) ExecX(ctx context.Context) {
	if err := rucb.Exec(ctx); err != nil {
		panic(err)
	}
}
