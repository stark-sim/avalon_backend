// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/avalon_backend/pkg/ent/predicate"
	"github.com/stark-sim/avalon_backend/pkg/ent/room"
	"github.com/stark-sim/avalon_backend/pkg/ent/roomuser"
)

// RoomUserUpdate is the builder for updating RoomUser entities.
type RoomUserUpdate struct {
	config
	hooks    []Hook
	mutation *RoomUserMutation
}

// Where appends a list predicates to the RoomUserUpdate builder.
func (ruu *RoomUserUpdate) Where(ps ...predicate.RoomUser) *RoomUserUpdate {
	ruu.mutation.Where(ps...)
	return ruu
}

// SetCreatedBy sets the "created_by" field.
func (ruu *RoomUserUpdate) SetCreatedBy(i int64) *RoomUserUpdate {
	ruu.mutation.ResetCreatedBy()
	ruu.mutation.SetCreatedBy(i)
	return ruu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ruu *RoomUserUpdate) SetNillableCreatedBy(i *int64) *RoomUserUpdate {
	if i != nil {
		ruu.SetCreatedBy(*i)
	}
	return ruu
}

// AddCreatedBy adds i to the "created_by" field.
func (ruu *RoomUserUpdate) AddCreatedBy(i int64) *RoomUserUpdate {
	ruu.mutation.AddCreatedBy(i)
	return ruu
}

// SetUpdatedBy sets the "updated_by" field.
func (ruu *RoomUserUpdate) SetUpdatedBy(i int64) *RoomUserUpdate {
	ruu.mutation.ResetUpdatedBy()
	ruu.mutation.SetUpdatedBy(i)
	return ruu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruu *RoomUserUpdate) SetNillableUpdatedBy(i *int64) *RoomUserUpdate {
	if i != nil {
		ruu.SetUpdatedBy(*i)
	}
	return ruu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ruu *RoomUserUpdate) AddUpdatedBy(i int64) *RoomUserUpdate {
	ruu.mutation.AddUpdatedBy(i)
	return ruu
}

// SetUpdatedAt sets the "updated_at" field.
func (ruu *RoomUserUpdate) SetUpdatedAt(t time.Time) *RoomUserUpdate {
	ruu.mutation.SetUpdatedAt(t)
	return ruu
}

// SetDeletedAt sets the "deleted_at" field.
func (ruu *RoomUserUpdate) SetDeletedAt(t time.Time) *RoomUserUpdate {
	ruu.mutation.SetDeletedAt(t)
	return ruu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruu *RoomUserUpdate) SetNillableDeletedAt(t *time.Time) *RoomUserUpdate {
	if t != nil {
		ruu.SetDeletedAt(*t)
	}
	return ruu
}

// SetUserID sets the "user_id" field.
func (ruu *RoomUserUpdate) SetUserID(i int64) *RoomUserUpdate {
	ruu.mutation.ResetUserID()
	ruu.mutation.SetUserID(i)
	return ruu
}

// AddUserID adds i to the "user_id" field.
func (ruu *RoomUserUpdate) AddUserID(i int64) *RoomUserUpdate {
	ruu.mutation.AddUserID(i)
	return ruu
}

// SetRoomID sets the "room_id" field.
func (ruu *RoomUserUpdate) SetRoomID(i int64) *RoomUserUpdate {
	ruu.mutation.SetRoomID(i)
	return ruu
}

// SetRoom sets the "room" edge to the Room entity.
func (ruu *RoomUserUpdate) SetRoom(r *Room) *RoomUserUpdate {
	return ruu.SetRoomID(r.ID)
}

// Mutation returns the RoomUserMutation object of the builder.
func (ruu *RoomUserUpdate) Mutation() *RoomUserMutation {
	return ruu.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (ruu *RoomUserUpdate) ClearRoom() *RoomUserUpdate {
	ruu.mutation.ClearRoom()
	return ruu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ruu *RoomUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ruu.defaults()
	if len(ruu.hooks) == 0 {
		if err = ruu.check(); err != nil {
			return 0, err
		}
		affected, err = ruu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruu.check(); err != nil {
				return 0, err
			}
			ruu.mutation = mutation
			affected, err = ruu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ruu.hooks) - 1; i >= 0; i-- {
			if ruu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruu *RoomUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ruu *RoomUserUpdate) Exec(ctx context.Context) error {
	_, err := ruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruu *RoomUserUpdate) ExecX(ctx context.Context) {
	if err := ruu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruu *RoomUserUpdate) defaults() {
	if _, ok := ruu.mutation.UpdatedAt(); !ok {
		v := roomuser.UpdateDefaultUpdatedAt()
		ruu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruu *RoomUserUpdate) check() error {
	if _, ok := ruu.mutation.RoomID(); ruu.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoomUser.room"`)
	}
	return nil
}

func (ruu *RoomUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roomuser.Table,
			Columns: roomuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: roomuser.FieldID,
			},
		},
	}
	if ps := ruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruu.mutation.CreatedBy(); ok {
		_spec.SetField(roomuser.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ruu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(roomuser.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ruu.mutation.UpdatedBy(); ok {
		_spec.SetField(roomuser.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ruu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(roomuser.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ruu.mutation.UpdatedAt(); ok {
		_spec.SetField(roomuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruu.mutation.DeletedAt(); ok {
		_spec.SetField(roomuser.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := ruu.mutation.UserID(); ok {
		_spec.SetField(roomuser.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ruu.mutation.AddedUserID(); ok {
		_spec.AddField(roomuser.FieldUserID, field.TypeInt64, value)
	}
	if ruu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.RoomTable,
			Columns: []string{roomuser.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.RoomTable,
			Columns: []string{roomuser.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RoomUserUpdateOne is the builder for updating a single RoomUser entity.
type RoomUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomUserMutation
}

// SetCreatedBy sets the "created_by" field.
func (ruuo *RoomUserUpdateOne) SetCreatedBy(i int64) *RoomUserUpdateOne {
	ruuo.mutation.ResetCreatedBy()
	ruuo.mutation.SetCreatedBy(i)
	return ruuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ruuo *RoomUserUpdateOne) SetNillableCreatedBy(i *int64) *RoomUserUpdateOne {
	if i != nil {
		ruuo.SetCreatedBy(*i)
	}
	return ruuo
}

// AddCreatedBy adds i to the "created_by" field.
func (ruuo *RoomUserUpdateOne) AddCreatedBy(i int64) *RoomUserUpdateOne {
	ruuo.mutation.AddCreatedBy(i)
	return ruuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruuo *RoomUserUpdateOne) SetUpdatedBy(i int64) *RoomUserUpdateOne {
	ruuo.mutation.ResetUpdatedBy()
	ruuo.mutation.SetUpdatedBy(i)
	return ruuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruuo *RoomUserUpdateOne) SetNillableUpdatedBy(i *int64) *RoomUserUpdateOne {
	if i != nil {
		ruuo.SetUpdatedBy(*i)
	}
	return ruuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ruuo *RoomUserUpdateOne) AddUpdatedBy(i int64) *RoomUserUpdateOne {
	ruuo.mutation.AddUpdatedBy(i)
	return ruuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruuo *RoomUserUpdateOne) SetUpdatedAt(t time.Time) *RoomUserUpdateOne {
	ruuo.mutation.SetUpdatedAt(t)
	return ruuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruuo *RoomUserUpdateOne) SetDeletedAt(t time.Time) *RoomUserUpdateOne {
	ruuo.mutation.SetDeletedAt(t)
	return ruuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruuo *RoomUserUpdateOne) SetNillableDeletedAt(t *time.Time) *RoomUserUpdateOne {
	if t != nil {
		ruuo.SetDeletedAt(*t)
	}
	return ruuo
}

// SetUserID sets the "user_id" field.
func (ruuo *RoomUserUpdateOne) SetUserID(i int64) *RoomUserUpdateOne {
	ruuo.mutation.ResetUserID()
	ruuo.mutation.SetUserID(i)
	return ruuo
}

// AddUserID adds i to the "user_id" field.
func (ruuo *RoomUserUpdateOne) AddUserID(i int64) *RoomUserUpdateOne {
	ruuo.mutation.AddUserID(i)
	return ruuo
}

// SetRoomID sets the "room_id" field.
func (ruuo *RoomUserUpdateOne) SetRoomID(i int64) *RoomUserUpdateOne {
	ruuo.mutation.SetRoomID(i)
	return ruuo
}

// SetRoom sets the "room" edge to the Room entity.
func (ruuo *RoomUserUpdateOne) SetRoom(r *Room) *RoomUserUpdateOne {
	return ruuo.SetRoomID(r.ID)
}

// Mutation returns the RoomUserMutation object of the builder.
func (ruuo *RoomUserUpdateOne) Mutation() *RoomUserMutation {
	return ruuo.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (ruuo *RoomUserUpdateOne) ClearRoom() *RoomUserUpdateOne {
	ruuo.mutation.ClearRoom()
	return ruuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruuo *RoomUserUpdateOne) Select(field string, fields ...string) *RoomUserUpdateOne {
	ruuo.fields = append([]string{field}, fields...)
	return ruuo
}

// Save executes the query and returns the updated RoomUser entity.
func (ruuo *RoomUserUpdateOne) Save(ctx context.Context) (*RoomUser, error) {
	var (
		err  error
		node *RoomUser
	)
	ruuo.defaults()
	if len(ruuo.hooks) == 0 {
		if err = ruuo.check(); err != nil {
			return nil, err
		}
		node, err = ruuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruuo.check(); err != nil {
				return nil, err
			}
			ruuo.mutation = mutation
			node, err = ruuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruuo.hooks) - 1; i >= 0; i-- {
			if ruuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RoomUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RoomUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruuo *RoomUserUpdateOne) SaveX(ctx context.Context) *RoomUser {
	node, err := ruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruuo *RoomUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruuo *RoomUserUpdateOne) ExecX(ctx context.Context) {
	if err := ruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruuo *RoomUserUpdateOne) defaults() {
	if _, ok := ruuo.mutation.UpdatedAt(); !ok {
		v := roomuser.UpdateDefaultUpdatedAt()
		ruuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruuo *RoomUserUpdateOne) check() error {
	if _, ok := ruuo.mutation.RoomID(); ruuo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoomUser.room"`)
	}
	return nil
}

func (ruuo *RoomUserUpdateOne) sqlSave(ctx context.Context) (_node *RoomUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roomuser.Table,
			Columns: roomuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: roomuser.FieldID,
			},
		},
	}
	id, ok := ruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoomUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roomuser.FieldID)
		for _, f := range fields {
			if !roomuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roomuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruuo.mutation.CreatedBy(); ok {
		_spec.SetField(roomuser.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ruuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(roomuser.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := ruuo.mutation.UpdatedBy(); ok {
		_spec.SetField(roomuser.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ruuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(roomuser.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := ruuo.mutation.UpdatedAt(); ok {
		_spec.SetField(roomuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruuo.mutation.DeletedAt(); ok {
		_spec.SetField(roomuser.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := ruuo.mutation.UserID(); ok {
		_spec.SetField(roomuser.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ruuo.mutation.AddedUserID(); ok {
		_spec.AddField(roomuser.FieldUserID, field.TypeInt64, value)
	}
	if ruuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.RoomTable,
			Columns: []string{roomuser.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.RoomTable,
			Columns: []string{roomuser.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RoomUser{config: ruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
