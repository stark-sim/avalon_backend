// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/avalon_backend/pkg/ent/mission"
	"github.com/stark-sim/avalon_backend/pkg/ent/squad"
)

// SquadCreate is the builder for creating a Squad entity.
type SquadCreate struct {
	config
	mutation *SquadMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (sc *SquadCreate) SetCreatedBy(i int64) *SquadCreate {
	sc.mutation.SetCreatedBy(i)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SquadCreate) SetNillableCreatedBy(i *int64) *SquadCreate {
	if i != nil {
		sc.SetCreatedBy(*i)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SquadCreate) SetUpdatedBy(i int64) *SquadCreate {
	sc.mutation.SetUpdatedBy(i)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SquadCreate) SetNillableUpdatedBy(i *int64) *SquadCreate {
	if i != nil {
		sc.SetUpdatedBy(*i)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SquadCreate) SetCreatedAt(t time.Time) *SquadCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SquadCreate) SetNillableCreatedAt(t *time.Time) *SquadCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SquadCreate) SetUpdatedAt(t time.Time) *SquadCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SquadCreate) SetNillableUpdatedAt(t *time.Time) *SquadCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SquadCreate) SetDeletedAt(t time.Time) *SquadCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SquadCreate) SetNillableDeletedAt(t *time.Time) *SquadCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetMissionID sets the "mission_id" field.
func (sc *SquadCreate) SetMissionID(i int64) *SquadCreate {
	sc.mutation.SetMissionID(i)
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *SquadCreate) SetUserID(i int64) *SquadCreate {
	sc.mutation.SetUserID(i)
	return sc
}

// SetRat sets the "rat" field.
func (sc *SquadCreate) SetRat(b bool) *SquadCreate {
	sc.mutation.SetRat(b)
	return sc
}

// SetNillableRat sets the "rat" field if the given value is not nil.
func (sc *SquadCreate) SetNillableRat(b *bool) *SquadCreate {
	if b != nil {
		sc.SetRat(*b)
	}
	return sc
}

// SetActed sets the "acted" field.
func (sc *SquadCreate) SetActed(b bool) *SquadCreate {
	sc.mutation.SetActed(b)
	return sc
}

// SetNillableActed sets the "acted" field if the given value is not nil.
func (sc *SquadCreate) SetNillableActed(b *bool) *SquadCreate {
	if b != nil {
		sc.SetActed(*b)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SquadCreate) SetID(i int64) *SquadCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SquadCreate) SetNillableID(i *int64) *SquadCreate {
	if i != nil {
		sc.SetID(*i)
	}
	return sc
}

// SetMission sets the "mission" edge to the Mission entity.
func (sc *SquadCreate) SetMission(m *Mission) *SquadCreate {
	return sc.SetMissionID(m.ID)
}

// Mutation returns the SquadMutation object of the builder.
func (sc *SquadCreate) Mutation() *SquadMutation {
	return sc.mutation
}

// Save creates the Squad in the database.
func (sc *SquadCreate) Save(ctx context.Context) (*Squad, error) {
	var (
		err  error
		node *Squad
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SquadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Squad)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SquadMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SquadCreate) SaveX(ctx context.Context) *Squad {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SquadCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SquadCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SquadCreate) defaults() {
	if _, ok := sc.mutation.CreatedBy(); !ok {
		v := squad.DefaultCreatedBy
		sc.mutation.SetCreatedBy(v)
	}
	if _, ok := sc.mutation.UpdatedBy(); !ok {
		v := squad.DefaultUpdatedBy
		sc.mutation.SetUpdatedBy(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := squad.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := squad.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		v := squad.DefaultDeletedAt
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.Rat(); !ok {
		v := squad.DefaultRat
		sc.mutation.SetRat(v)
	}
	if _, ok := sc.mutation.Acted(); !ok {
		v := squad.DefaultActed
		sc.mutation.SetActed(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := squad.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SquadCreate) check() error {
	if _, ok := sc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Squad.created_by"`)}
	}
	if _, ok := sc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Squad.updated_by"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Squad.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Squad.updated_at"`)}
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Squad.deleted_at"`)}
	}
	if _, ok := sc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission_id", err: errors.New(`ent: missing required field "Squad.mission_id"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Squad.user_id"`)}
	}
	if _, ok := sc.mutation.Rat(); !ok {
		return &ValidationError{Name: "rat", err: errors.New(`ent: missing required field "Squad.rat"`)}
	}
	if _, ok := sc.mutation.Acted(); !ok {
		return &ValidationError{Name: "acted", err: errors.New(`ent: missing required field "Squad.acted"`)}
	}
	if _, ok := sc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission", err: errors.New(`ent: missing required edge "Squad.mission"`)}
	}
	return nil
}

func (sc *SquadCreate) sqlSave(ctx context.Context) (*Squad, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (sc *SquadCreate) createSpec() (*Squad, *sqlgraph.CreateSpec) {
	var (
		_node = &Squad{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: squad.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: squad.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(squad.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(squad.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(squad.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(squad.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(squad.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.UserID(); ok {
		_spec.SetField(squad.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := sc.mutation.Rat(); ok {
		_spec.SetField(squad.FieldRat, field.TypeBool, value)
		_node.Rat = value
	}
	if value, ok := sc.mutation.Acted(); ok {
		_spec.SetField(squad.FieldActed, field.TypeBool, value)
		_node.Acted = value
	}
	if nodes := sc.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.MissionTable,
			Columns: []string{squad.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: mission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SquadCreateBulk is the builder for creating many Squad entities in bulk.
type SquadCreateBulk struct {
	config
	builders []*SquadCreate
}

// Save creates the Squad entities in the database.
func (scb *SquadCreateBulk) Save(ctx context.Context) ([]*Squad, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Squad, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SquadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SquadCreateBulk) SaveX(ctx context.Context) []*Squad {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SquadCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SquadCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
