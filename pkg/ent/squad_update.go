// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/avalon_backend/pkg/ent/mission"
	"github.com/stark-sim/avalon_backend/pkg/ent/predicate"
	"github.com/stark-sim/avalon_backend/pkg/ent/squad"
)

// SquadUpdate is the builder for updating Squad entities.
type SquadUpdate struct {
	config
	hooks    []Hook
	mutation *SquadMutation
}

// Where appends a list predicates to the SquadUpdate builder.
func (su *SquadUpdate) Where(ps ...predicate.Squad) *SquadUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SquadUpdate) SetCreatedBy(i int64) *SquadUpdate {
	su.mutation.ResetCreatedBy()
	su.mutation.SetCreatedBy(i)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SquadUpdate) SetNillableCreatedBy(i *int64) *SquadUpdate {
	if i != nil {
		su.SetCreatedBy(*i)
	}
	return su
}

// AddCreatedBy adds i to the "created_by" field.
func (su *SquadUpdate) AddCreatedBy(i int64) *SquadUpdate {
	su.mutation.AddCreatedBy(i)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SquadUpdate) SetUpdatedBy(i int64) *SquadUpdate {
	su.mutation.ResetUpdatedBy()
	su.mutation.SetUpdatedBy(i)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SquadUpdate) SetNillableUpdatedBy(i *int64) *SquadUpdate {
	if i != nil {
		su.SetUpdatedBy(*i)
	}
	return su
}

// AddUpdatedBy adds i to the "updated_by" field.
func (su *SquadUpdate) AddUpdatedBy(i int64) *SquadUpdate {
	su.mutation.AddUpdatedBy(i)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SquadUpdate) SetUpdatedAt(t time.Time) *SquadUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SquadUpdate) SetDeletedAt(t time.Time) *SquadUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SquadUpdate) SetNillableDeletedAt(t *time.Time) *SquadUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// SetMissionID sets the "mission_id" field.
func (su *SquadUpdate) SetMissionID(i int64) *SquadUpdate {
	su.mutation.SetMissionID(i)
	return su
}

// SetUserID sets the "user_id" field.
func (su *SquadUpdate) SetUserID(i int64) *SquadUpdate {
	su.mutation.ResetUserID()
	su.mutation.SetUserID(i)
	return su
}

// AddUserID adds i to the "user_id" field.
func (su *SquadUpdate) AddUserID(i int64) *SquadUpdate {
	su.mutation.AddUserID(i)
	return su
}

// SetRat sets the "rat" field.
func (su *SquadUpdate) SetRat(b bool) *SquadUpdate {
	su.mutation.SetRat(b)
	return su
}

// SetNillableRat sets the "rat" field if the given value is not nil.
func (su *SquadUpdate) SetNillableRat(b *bool) *SquadUpdate {
	if b != nil {
		su.SetRat(*b)
	}
	return su
}

// SetMission sets the "mission" edge to the Mission entity.
func (su *SquadUpdate) SetMission(m *Mission) *SquadUpdate {
	return su.SetMissionID(m.ID)
}

// Mutation returns the SquadMutation object of the builder.
func (su *SquadUpdate) Mutation() *SquadMutation {
	return su.mutation
}

// ClearMission clears the "mission" edge to the Mission entity.
func (su *SquadUpdate) ClearMission() *SquadUpdate {
	su.mutation.ClearMission()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SquadUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SquadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SquadUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SquadUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SquadUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SquadUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := squad.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SquadUpdate) check() error {
	if _, ok := su.mutation.MissionID(); su.mutation.MissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Squad.mission"`)
	}
	return nil
}

func (su *SquadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   squad.Table,
			Columns: squad.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: squad.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.SetField(squad.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedCreatedBy(); ok {
		_spec.AddField(squad.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(squad.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(squad.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(squad.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(squad.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(squad.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUserID(); ok {
		_spec.AddField(squad.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Rat(); ok {
		_spec.SetField(squad.FieldRat, field.TypeBool, value)
	}
	if su.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.MissionTable,
			Columns: []string{squad.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: mission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.MissionTable,
			Columns: []string{squad.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: mission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{squad.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SquadUpdateOne is the builder for updating a single Squad entity.
type SquadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SquadMutation
}

// SetCreatedBy sets the "created_by" field.
func (suo *SquadUpdateOne) SetCreatedBy(i int64) *SquadUpdateOne {
	suo.mutation.ResetCreatedBy()
	suo.mutation.SetCreatedBy(i)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SquadUpdateOne) SetNillableCreatedBy(i *int64) *SquadUpdateOne {
	if i != nil {
		suo.SetCreatedBy(*i)
	}
	return suo
}

// AddCreatedBy adds i to the "created_by" field.
func (suo *SquadUpdateOne) AddCreatedBy(i int64) *SquadUpdateOne {
	suo.mutation.AddCreatedBy(i)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SquadUpdateOne) SetUpdatedBy(i int64) *SquadUpdateOne {
	suo.mutation.ResetUpdatedBy()
	suo.mutation.SetUpdatedBy(i)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SquadUpdateOne) SetNillableUpdatedBy(i *int64) *SquadUpdateOne {
	if i != nil {
		suo.SetUpdatedBy(*i)
	}
	return suo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suo *SquadUpdateOne) AddUpdatedBy(i int64) *SquadUpdateOne {
	suo.mutation.AddUpdatedBy(i)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SquadUpdateOne) SetUpdatedAt(t time.Time) *SquadUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SquadUpdateOne) SetDeletedAt(t time.Time) *SquadUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SquadUpdateOne) SetNillableDeletedAt(t *time.Time) *SquadUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// SetMissionID sets the "mission_id" field.
func (suo *SquadUpdateOne) SetMissionID(i int64) *SquadUpdateOne {
	suo.mutation.SetMissionID(i)
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *SquadUpdateOne) SetUserID(i int64) *SquadUpdateOne {
	suo.mutation.ResetUserID()
	suo.mutation.SetUserID(i)
	return suo
}

// AddUserID adds i to the "user_id" field.
func (suo *SquadUpdateOne) AddUserID(i int64) *SquadUpdateOne {
	suo.mutation.AddUserID(i)
	return suo
}

// SetRat sets the "rat" field.
func (suo *SquadUpdateOne) SetRat(b bool) *SquadUpdateOne {
	suo.mutation.SetRat(b)
	return suo
}

// SetNillableRat sets the "rat" field if the given value is not nil.
func (suo *SquadUpdateOne) SetNillableRat(b *bool) *SquadUpdateOne {
	if b != nil {
		suo.SetRat(*b)
	}
	return suo
}

// SetMission sets the "mission" edge to the Mission entity.
func (suo *SquadUpdateOne) SetMission(m *Mission) *SquadUpdateOne {
	return suo.SetMissionID(m.ID)
}

// Mutation returns the SquadMutation object of the builder.
func (suo *SquadUpdateOne) Mutation() *SquadMutation {
	return suo.mutation
}

// ClearMission clears the "mission" edge to the Mission entity.
func (suo *SquadUpdateOne) ClearMission() *SquadUpdateOne {
	suo.mutation.ClearMission()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SquadUpdateOne) Select(field string, fields ...string) *SquadUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Squad entity.
func (suo *SquadUpdateOne) Save(ctx context.Context) (*Squad, error) {
	var (
		err  error
		node *Squad
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SquadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Squad)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SquadMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SquadUpdateOne) SaveX(ctx context.Context) *Squad {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SquadUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SquadUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SquadUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := squad.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SquadUpdateOne) check() error {
	if _, ok := suo.mutation.MissionID(); suo.mutation.MissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Squad.mission"`)
	}
	return nil
}

func (suo *SquadUpdateOne) sqlSave(ctx context.Context) (_node *Squad, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   squad.Table,
			Columns: squad.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: squad.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Squad.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, squad.FieldID)
		for _, f := range fields {
			if !squad.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != squad.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.SetField(squad.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(squad.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(squad.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(squad.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(squad.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(squad.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(squad.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUserID(); ok {
		_spec.AddField(squad.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Rat(); ok {
		_spec.SetField(squad.FieldRat, field.TypeBool, value)
	}
	if suo.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.MissionTable,
			Columns: []string{squad.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: mission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   squad.MissionTable,
			Columns: []string{squad.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: mission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Squad{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{squad.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
