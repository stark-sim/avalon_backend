// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stark-sim/avalon_backend/pkg/ent/mission"
	"github.com/stark-sim/avalon_backend/pkg/ent/predicate"
	"github.com/stark-sim/avalon_backend/pkg/ent/vote"
)

// VoteUpdate is the builder for updating Vote entities.
type VoteUpdate struct {
	config
	hooks    []Hook
	mutation *VoteMutation
}

// Where appends a list predicates to the VoteUpdate builder.
func (vu *VoteUpdate) Where(ps ...predicate.Vote) *VoteUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetCreatedBy sets the "created_by" field.
func (vu *VoteUpdate) SetCreatedBy(i int64) *VoteUpdate {
	vu.mutation.ResetCreatedBy()
	vu.mutation.SetCreatedBy(i)
	return vu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vu *VoteUpdate) SetNillableCreatedBy(i *int64) *VoteUpdate {
	if i != nil {
		vu.SetCreatedBy(*i)
	}
	return vu
}

// AddCreatedBy adds i to the "created_by" field.
func (vu *VoteUpdate) AddCreatedBy(i int64) *VoteUpdate {
	vu.mutation.AddCreatedBy(i)
	return vu
}

// SetUpdatedBy sets the "updated_by" field.
func (vu *VoteUpdate) SetUpdatedBy(i int64) *VoteUpdate {
	vu.mutation.ResetUpdatedBy()
	vu.mutation.SetUpdatedBy(i)
	return vu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vu *VoteUpdate) SetNillableUpdatedBy(i *int64) *VoteUpdate {
	if i != nil {
		vu.SetUpdatedBy(*i)
	}
	return vu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vu *VoteUpdate) AddUpdatedBy(i int64) *VoteUpdate {
	vu.mutation.AddUpdatedBy(i)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VoteUpdate) SetUpdatedAt(t time.Time) *VoteUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VoteUpdate) SetDeletedAt(t time.Time) *VoteUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VoteUpdate) SetNillableDeletedAt(t *time.Time) *VoteUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// SetMissionID sets the "mission_id" field.
func (vu *VoteUpdate) SetMissionID(i int64) *VoteUpdate {
	vu.mutation.SetMissionID(i)
	return vu
}

// SetUserID sets the "user_id" field.
func (vu *VoteUpdate) SetUserID(i int64) *VoteUpdate {
	vu.mutation.ResetUserID()
	vu.mutation.SetUserID(i)
	return vu
}

// AddUserID adds i to the "user_id" field.
func (vu *VoteUpdate) AddUserID(i int64) *VoteUpdate {
	vu.mutation.AddUserID(i)
	return vu
}

// SetPass sets the "pass" field.
func (vu *VoteUpdate) SetPass(b bool) *VoteUpdate {
	vu.mutation.SetPass(b)
	return vu
}

// SetNillablePass sets the "pass" field if the given value is not nil.
func (vu *VoteUpdate) SetNillablePass(b *bool) *VoteUpdate {
	if b != nil {
		vu.SetPass(*b)
	}
	return vu
}

// SetVoted sets the "voted" field.
func (vu *VoteUpdate) SetVoted(b bool) *VoteUpdate {
	vu.mutation.SetVoted(b)
	return vu
}

// SetNillableVoted sets the "voted" field if the given value is not nil.
func (vu *VoteUpdate) SetNillableVoted(b *bool) *VoteUpdate {
	if b != nil {
		vu.SetVoted(*b)
	}
	return vu
}

// SetMission sets the "mission" edge to the Mission entity.
func (vu *VoteUpdate) SetMission(m *Mission) *VoteUpdate {
	return vu.SetMissionID(m.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (vu *VoteUpdate) Mutation() *VoteMutation {
	return vu.mutation
}

// ClearMission clears the "mission" edge to the Mission entity.
func (vu *VoteUpdate) ClearMission() *VoteUpdate {
	vu.mutation.ClearMission()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VoteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vu.defaults()
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VoteUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VoteUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VoteUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VoteUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := vote.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VoteUpdate) check() error {
	if _, ok := vu.mutation.MissionID(); vu.mutation.MissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Vote.mission"`)
	}
	return nil
}

func (vu *VoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vote.Table,
			Columns: vote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: vote.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.CreatedBy(); ok {
		_spec.SetField(vote.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(vote.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.UpdatedBy(); ok {
		_spec.SetField(vote.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(vote.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(vote.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(vote.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UserID(); ok {
		_spec.SetField(vote.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedUserID(); ok {
		_spec.AddField(vote.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.Pass(); ok {
		_spec.SetField(vote.FieldPass, field.TypeBool, value)
	}
	if value, ok := vu.mutation.Voted(); ok {
		_spec.SetField(vote.FieldVoted, field.TypeBool, value)
	}
	if vu.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.MissionTable,
			Columns: []string{vote.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: mission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.MissionTable,
			Columns: []string{vote.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: mission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// VoteUpdateOne is the builder for updating a single Vote entity.
type VoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoteMutation
}

// SetCreatedBy sets the "created_by" field.
func (vuo *VoteUpdateOne) SetCreatedBy(i int64) *VoteUpdateOne {
	vuo.mutation.ResetCreatedBy()
	vuo.mutation.SetCreatedBy(i)
	return vuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillableCreatedBy(i *int64) *VoteUpdateOne {
	if i != nil {
		vuo.SetCreatedBy(*i)
	}
	return vuo
}

// AddCreatedBy adds i to the "created_by" field.
func (vuo *VoteUpdateOne) AddCreatedBy(i int64) *VoteUpdateOne {
	vuo.mutation.AddCreatedBy(i)
	return vuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vuo *VoteUpdateOne) SetUpdatedBy(i int64) *VoteUpdateOne {
	vuo.mutation.ResetUpdatedBy()
	vuo.mutation.SetUpdatedBy(i)
	return vuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillableUpdatedBy(i *int64) *VoteUpdateOne {
	if i != nil {
		vuo.SetUpdatedBy(*i)
	}
	return vuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vuo *VoteUpdateOne) AddUpdatedBy(i int64) *VoteUpdateOne {
	vuo.mutation.AddUpdatedBy(i)
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VoteUpdateOne) SetUpdatedAt(t time.Time) *VoteUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VoteUpdateOne) SetDeletedAt(t time.Time) *VoteUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillableDeletedAt(t *time.Time) *VoteUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// SetMissionID sets the "mission_id" field.
func (vuo *VoteUpdateOne) SetMissionID(i int64) *VoteUpdateOne {
	vuo.mutation.SetMissionID(i)
	return vuo
}

// SetUserID sets the "user_id" field.
func (vuo *VoteUpdateOne) SetUserID(i int64) *VoteUpdateOne {
	vuo.mutation.ResetUserID()
	vuo.mutation.SetUserID(i)
	return vuo
}

// AddUserID adds i to the "user_id" field.
func (vuo *VoteUpdateOne) AddUserID(i int64) *VoteUpdateOne {
	vuo.mutation.AddUserID(i)
	return vuo
}

// SetPass sets the "pass" field.
func (vuo *VoteUpdateOne) SetPass(b bool) *VoteUpdateOne {
	vuo.mutation.SetPass(b)
	return vuo
}

// SetNillablePass sets the "pass" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillablePass(b *bool) *VoteUpdateOne {
	if b != nil {
		vuo.SetPass(*b)
	}
	return vuo
}

// SetVoted sets the "voted" field.
func (vuo *VoteUpdateOne) SetVoted(b bool) *VoteUpdateOne {
	vuo.mutation.SetVoted(b)
	return vuo
}

// SetNillableVoted sets the "voted" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillableVoted(b *bool) *VoteUpdateOne {
	if b != nil {
		vuo.SetVoted(*b)
	}
	return vuo
}

// SetMission sets the "mission" edge to the Mission entity.
func (vuo *VoteUpdateOne) SetMission(m *Mission) *VoteUpdateOne {
	return vuo.SetMissionID(m.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (vuo *VoteUpdateOne) Mutation() *VoteMutation {
	return vuo.mutation
}

// ClearMission clears the "mission" edge to the Mission entity.
func (vuo *VoteUpdateOne) ClearMission() *VoteUpdateOne {
	vuo.mutation.ClearMission()
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VoteUpdateOne) Select(field string, fields ...string) *VoteUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vote entity.
func (vuo *VoteUpdateOne) Save(ctx context.Context) (*Vote, error) {
	var (
		err  error
		node *Vote
	)
	vuo.defaults()
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Vote)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VoteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VoteUpdateOne) SaveX(ctx context.Context) *Vote {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VoteUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VoteUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VoteUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := vote.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VoteUpdateOne) check() error {
	if _, ok := vuo.mutation.MissionID(); vuo.mutation.MissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Vote.mission"`)
	}
	return nil
}

func (vuo *VoteUpdateOne) sqlSave(ctx context.Context) (_node *Vote, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vote.Table,
			Columns: vote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: vote.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vote.FieldID)
		for _, f := range fields {
			if !vote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.CreatedBy(); ok {
		_spec.SetField(vote.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(vote.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.UpdatedBy(); ok {
		_spec.SetField(vote.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(vote.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vote.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(vote.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UserID(); ok {
		_spec.SetField(vote.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedUserID(); ok {
		_spec.AddField(vote.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.Pass(); ok {
		_spec.SetField(vote.FieldPass, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.Voted(); ok {
		_spec.SetField(vote.FieldVoted, field.TypeBool, value)
	}
	if vuo.mutation.MissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.MissionTable,
			Columns: []string{vote.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: mission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.MissionTable,
			Columns: []string{vote.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: mission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vote{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
