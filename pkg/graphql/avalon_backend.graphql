directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Card implements Node {
  id: ID!
  createdBy: Int!
  updatedBy: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  name: String!
}
"""Ordering options for Card connections"""
input CardOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Cards."""
  field: CardOrderField!
}
"""Properties by which Card connections can be ordered."""
enum CardOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
}
"""
CardWhereInput is used for filtering Card objects.
Input was generated by ent.
"""
input CardWhereInput {
  not: CardWhereInput
  and: [CardWhereInput!]
  or: [CardWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
CreateCardInput is used for create Card object.
Input was generated by ent.
"""
input CreateCardInput {
  createdBy: Int
  updatedBy: Int
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: String
}
"""
CreateGameInput is used for create Game object.
Input was generated by ent.
"""
input CreateGameInput {
  createdBy: Int
  updatedBy: Int
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  gameUserIDs: [ID!]
}
"""
CreateGameUserInput is used for create GameUser object.
Input was generated by ent.
"""
input CreateGameUserInput {
  createdBy: Int
  updatedBy: Int
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  userID: Int!
  gameID: ID!
}
"""
CreateRoomInput is used for create Room object.
Input was generated by ent.
"""
input CreateRoomInput {
  createdBy: Int
  updatedBy: Int
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: String
  roomUserIDs: [ID!]
}
"""
CreateRoomUserInput is used for create RoomUser object.
Input was generated by ent.
"""
input CreateRoomUserInput {
  createdBy: Int
  updatedBy: Int
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  userID: Int!
  roomID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Game implements Node {
  id: ID!
  createdBy: Int!
  updatedBy: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  gameUsers: [GameUser!]
}
"""Ordering options for Game connections"""
input GameOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Games."""
  field: GameOrderField!
}
"""Properties by which Game connections can be ordered."""
enum GameOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
type GameUser implements Node {
  id: ID!
  createdBy: Int!
  updatedBy: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  userID: Int!
  gameID: ID!
  game: Game!
}
"""Ordering options for GameUser connections"""
input GameUserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GameUsers."""
  field: GameUserOrderField!
}
"""Properties by which GameUser connections can be ordered."""
enum GameUserOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""
GameUserWhereInput is used for filtering GameUser objects.
Input was generated by ent.
"""
input GameUserWhereInput {
  not: GameUserWhereInput
  and: [GameUserWhereInput!]
  or: [GameUserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """user_id field predicates"""
  userID: Int
  userIDNEQ: Int
  userIDIn: [Int!]
  userIDNotIn: [Int!]
  userIDGT: Int
  userIDGTE: Int
  userIDLT: Int
  userIDLTE: Int
  """game_id field predicates"""
  gameID: ID
  gameIDNEQ: ID
  gameIDIn: [ID!]
  gameIDNotIn: [ID!]
  """game edge predicates"""
  hasGame: Boolean
  hasGameWith: [GameWhereInput!]
}
"""
GameWhereInput is used for filtering Game objects.
Input was generated by ent.
"""
input GameWhereInput {
  not: GameWhereInput
  and: [GameWhereInput!]
  or: [GameWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """game_users edge predicates"""
  hasGameUsers: Boolean
  hasGameUsersWith: [GameUserWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/stark-sim/avalon_backend/pkg/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  cards: [Card!]!
  games: [Game!]!
  gameUsers: [GameUser!]!
  rooms: [Room!]!
  roomUsers: [RoomUser!]!
}
type Room implements Node {
  id: ID!
  createdBy: Int!
  updatedBy: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  name: String!
  roomUsers: [RoomUser!]
}
"""Ordering options for Room connections"""
input RoomOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Rooms."""
  field: RoomOrderField!
}
"""Properties by which Room connections can be ordered."""
enum RoomOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
}
type RoomUser implements Node {
  id: ID!
  createdBy: Int!
  updatedBy: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  userID: Int!
  roomID: ID!
  room: Room!
}
"""Ordering options for RoomUser connections"""
input RoomUserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order RoomUsers."""
  field: RoomUserOrderField!
}
"""Properties by which RoomUser connections can be ordered."""
enum RoomUserOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""
RoomUserWhereInput is used for filtering RoomUser objects.
Input was generated by ent.
"""
input RoomUserWhereInput {
  not: RoomUserWhereInput
  and: [RoomUserWhereInput!]
  or: [RoomUserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """user_id field predicates"""
  userID: Int
  userIDNEQ: Int
  userIDIn: [Int!]
  userIDNotIn: [Int!]
  userIDGT: Int
  userIDGTE: Int
  userIDLT: Int
  userIDLTE: Int
  """room_id field predicates"""
  roomID: ID
  roomIDNEQ: ID
  roomIDIn: [ID!]
  roomIDNotIn: [ID!]
  """room edge predicates"""
  hasRoom: Boolean
  hasRoomWith: [RoomWhereInput!]
}
"""
RoomWhereInput is used for filtering Room objects.
Input was generated by ent.
"""
input RoomWhereInput {
  not: RoomWhereInput
  and: [RoomWhereInput!]
  or: [RoomWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """updated_by field predicates"""
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """room_users edge predicates"""
  hasRoomUsers: Boolean
  hasRoomUsersWith: [RoomUserWhereInput!]
}
"""
UpdateCardInput is used for update Card object.
Input was generated by ent.
"""
input UpdateCardInput {
  createdBy: Int
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  name: String
}
"""
UpdateGameInput is used for update Game object.
Input was generated by ent.
"""
input UpdateGameInput {
  createdBy: Int
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  addGameUserIDs: [ID!]
  removeGameUserIDs: [ID!]
}
"""
UpdateGameUserInput is used for update GameUser object.
Input was generated by ent.
"""
input UpdateGameUserInput {
  createdBy: Int
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  userID: Int
  clearGame: Boolean
  gameID: ID
}
"""
UpdateRoomInput is used for update Room object.
Input was generated by ent.
"""
input UpdateRoomInput {
  createdBy: Int
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  name: String
  addRoomUserIDs: [ID!]
  removeRoomUserIDs: [ID!]
}
"""
UpdateRoomUserInput is used for update RoomUser object.
Input was generated by ent.
"""
input UpdateRoomUserInput {
  createdBy: Int
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  userID: Int
  clearRoom: Boolean
  roomID: ID
}
