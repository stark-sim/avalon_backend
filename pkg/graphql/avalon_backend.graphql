directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Card implements Node {
  id: ID!
  createdBy: String!
  updatedBy: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  name: CardName!
  role: CardRole!
  tale: String!
  gameUsers: [GameUser!]
}
"""CardName is enum for the field name"""
enum CardName @goModel(model: "github.com/stark-sim/avalon_backend/pkg/ent/card.Name") {
  Merlin
  Percival
  Galahad
  Bors
  Bedivere
  Gawain
  Mordred
  Morgana
  Oberon
  Assassin
  Lancelot
}
"""Ordering options for Card connections"""
input CardOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Cards."""
  field: CardOrderField!
}
"""Properties by which Card connections can be ordered."""
enum CardOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
}
"""CardRole is enum for the field role"""
enum CardRole @goModel(model: "github.com/stark-sim/avalon_backend/pkg/ent/card.Role") {
  Prophet
  Knight
  Loyal
  Usurper
  Enchantress
  Assassin
  Erlking
  Vassal
  Ace
  Sinner
}
"""
CardWhereInput is used for filtering Card objects.
Input was generated by ent.
"""
input CardWhereInput {
  not: CardWhereInput
  and: [CardWhereInput!]
  or: [CardWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """name field predicates"""
  name: CardName
  nameNEQ: CardName
  nameIn: [CardName!]
  nameNotIn: [CardName!]
  """role field predicates"""
  role: CardRole
  roleNEQ: CardRole
  roleIn: [CardRole!]
  roleNotIn: [CardRole!]
  """tale field predicates"""
  tale: String
  taleNEQ: String
  taleIn: [String!]
  taleNotIn: [String!]
  taleGT: String
  taleGTE: String
  taleLT: String
  taleLTE: String
  taleContains: String
  taleHasPrefix: String
  taleHasSuffix: String
  taleEqualFold: String
  taleContainsFold: String
  """game_users edge predicates"""
  hasGameUsers: Boolean
  hasGameUsersWith: [GameUserWhereInput!]
}
"""
CreateCardInput is used for create Card object.
Input was generated by ent.
"""
input CreateCardInput {
  createdBy: String
  updatedBy: String
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: CardName
  role: CardRole!
  tale: String
  gameUserIDs: [ID!]
}
"""
CreateGameInput is used for create Game object.
Input was generated by ent.
"""
input CreateGameInput {
  createdBy: String
  updatedBy: String
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  endBy: GameEndBy
  """游戏人数"""
  capacity: Int
  gameUserIDs: [ID!]
  missionIDs: [ID!]
  roomID: ID!
}
"""
CreateGameUserInput is used for create GameUser object.
Input was generated by ent.
"""
input CreateGameUserInput {
  createdBy: String
  updatedBy: String
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  userID: ID!
  number: Int!
  gameID: ID!
  cardID: ID!
}
"""
CreateMissionInput is used for create Mission object.
Input was generated by ent.
"""
input CreateMissionInput {
  createdBy: String
  updatedBy: String
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  sequence: Int!
  status: MissionStatus
  failed: Boolean
  """任务人数"""
  capacity: Int
  leader: Int!
  gameID: ID!
  squadIDs: [ID!]
  missionVoteIDs: [ID!]
}
"""
CreateRecordInput is used for create Record object.
Input was generated by ent.
"""
input CreateRecordInput {
  createdBy: String
  updatedBy: String
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  userID: ID!
  score: Int
  roomID: ID!
}
"""
CreateRoomInput is used for create Room object.
Input was generated by ent.
"""
input CreateRoomInput {
  createdBy: String
  updatedBy: String
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: String
  closed: Boolean
  roomUserIDs: [ID!]
  gameIDs: [ID!]
  recordIDs: [ID!]
}
"""
CreateRoomUserInput is used for create RoomUser object.
Input was generated by ent.
"""
input CreateRoomUserInput {
  createdBy: String
  updatedBy: String
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  userID: ID!
  roomID: ID!
}
"""
CreateSquadInput is used for create Squad object.
Input was generated by ent.
"""
input CreateSquadInput {
  createdBy: String
  updatedBy: String
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  userID: ID!
  """是否破坏任务"""
  rat: Boolean
  missionID: ID!
}
"""
CreateVoteInput is used for create Vote object.
Input was generated by ent.
"""
input CreateVoteInput {
  createdBy: String
  updatedBy: String
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  userID: ID!
  pass: Boolean
  missionID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Game implements Node {
  id: ID!
  createdBy: String!
  updatedBy: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  roomID: ID!
  endBy: GameEndBy!
  """游戏人数"""
  capacity: Int!
  gameUsers: [GameUser!]
  missions: [Mission!]
  room: Room!
}
"""GameEndBy is enum for the field end_by"""
enum GameEndBy @goModel(model: "github.com/stark-sim/avalon_backend/pkg/ent/game.EndBy") {
  none
  blue
  red
  slayer
}
"""Ordering options for Game connections"""
input GameOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Games."""
  field: GameOrderField!
}
"""Properties by which Game connections can be ordered."""
enum GameOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
type GameUser implements Node {
  id: ID!
  createdBy: String!
  updatedBy: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  userID: ID!
  gameID: ID!
  cardID: ID!
  number: Int!
  game: Game!
  card: Card!
  user: User!
}
"""Ordering options for GameUser connections"""
input GameUserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GameUsers."""
  field: GameUserOrderField!
}
"""Properties by which GameUser connections can be ordered."""
enum GameUserOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""
GameUserWhereInput is used for filtering GameUser objects.
Input was generated by ent.
"""
input GameUserWhereInput {
  not: GameUserWhereInput
  and: [GameUserWhereInput!]
  or: [GameUserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  """game_id field predicates"""
  gameID: ID
  gameIDNEQ: ID
  gameIDIn: [ID!]
  gameIDNotIn: [ID!]
  """card_id field predicates"""
  cardID: ID
  cardIDNEQ: ID
  cardIDIn: [ID!]
  cardIDNotIn: [ID!]
  """number field predicates"""
  number: Int
  numberNEQ: Int
  numberIn: [Int!]
  numberNotIn: [Int!]
  numberGT: Int
  numberGTE: Int
  numberLT: Int
  numberLTE: Int
  """game edge predicates"""
  hasGame: Boolean
  hasGameWith: [GameWhereInput!]
  """card edge predicates"""
  hasCard: Boolean
  hasCardWith: [CardWhereInput!]
}
"""
GameWhereInput is used for filtering Game objects.
Input was generated by ent.
"""
input GameWhereInput {
  not: GameWhereInput
  and: [GameWhereInput!]
  or: [GameWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """room_id field predicates"""
  roomID: ID
  roomIDNEQ: ID
  roomIDIn: [ID!]
  roomIDNotIn: [ID!]
  """end_by field predicates"""
  endBy: GameEndBy
  endByNEQ: GameEndBy
  endByIn: [GameEndBy!]
  endByNotIn: [GameEndBy!]
  """capacity field predicates"""
  capacity: Int
  capacityNEQ: Int
  capacityIn: [Int!]
  capacityNotIn: [Int!]
  capacityGT: Int
  capacityGTE: Int
  capacityLT: Int
  capacityLTE: Int
  """game_users edge predicates"""
  hasGameUsers: Boolean
  hasGameUsersWith: [GameUserWhereInput!]
  """missions edge predicates"""
  hasMissions: Boolean
  hasMissionsWith: [MissionWhereInput!]
  """room edge predicates"""
  hasRoom: Boolean
  hasRoomWith: [RoomWhereInput!]
}
type Mission implements Node {
  id: ID!
  createdBy: String!
  updatedBy: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  sequence: Int!
  status: MissionStatus!
  failed: Boolean!
  gameID: ID!
  """任务人数"""
  capacity: Int!
  leader: Int!
  game: Game!
  squads: [Squad!]
  missionVotes: [Vote!]
}
"""Ordering options for Mission connections"""
input MissionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Missions."""
  field: MissionOrderField!
}
"""Properties by which Mission connections can be ordered."""
enum MissionOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""MissionStatus is enum for the field status"""
enum MissionStatus @goModel(model: "github.com/stark-sim/avalon_backend/pkg/ent/mission.Status") {
  picking
  voting
  acting
  closed
  delayed
}
"""
MissionWhereInput is used for filtering Mission objects.
Input was generated by ent.
"""
input MissionWhereInput {
  not: MissionWhereInput
  and: [MissionWhereInput!]
  or: [MissionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """sequence field predicates"""
  sequence: Int
  sequenceNEQ: Int
  sequenceIn: [Int!]
  sequenceNotIn: [Int!]
  sequenceGT: Int
  sequenceGTE: Int
  sequenceLT: Int
  sequenceLTE: Int
  """status field predicates"""
  status: MissionStatus
  statusNEQ: MissionStatus
  statusIn: [MissionStatus!]
  statusNotIn: [MissionStatus!]
  """failed field predicates"""
  failed: Boolean
  failedNEQ: Boolean
  """game_id field predicates"""
  gameID: ID
  gameIDNEQ: ID
  gameIDIn: [ID!]
  gameIDNotIn: [ID!]
  """capacity field predicates"""
  capacity: Int
  capacityNEQ: Int
  capacityIn: [Int!]
  capacityNotIn: [Int!]
  capacityGT: Int
  capacityGTE: Int
  capacityLT: Int
  capacityLTE: Int
  """leader field predicates"""
  leader: Int
  leaderNEQ: Int
  leaderIn: [Int!]
  leaderNotIn: [Int!]
  leaderGT: Int
  leaderGTE: Int
  leaderLT: Int
  leaderLTE: Int
  """game edge predicates"""
  hasGame: Boolean
  hasGameWith: [GameWhereInput!]
  """squads edge predicates"""
  hasSquads: Boolean
  hasSquadsWith: [SquadWhereInput!]
  """mission_votes edge predicates"""
  hasMissionVotes: Boolean
  hasMissionVotesWith: [VoteWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/stark-sim/avalon_backend/pkg/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  cards: [Card!]!
  games: [Game!]!
  gameUsers: [GameUser!]!
  missions: [Mission!]!
  records: [Record!]!
  rooms: [Room!]!
  roomUsers: [RoomUser!]!
  squads: [Squad!]!
  votes: [Vote!]!
}
type Record implements Node {
  id: ID!
  createdBy: String!
  updatedBy: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  userID: ID!
  roomID: ID!
  score: Int!
  room: Room!
  user: User!
}
"""Ordering options for Record connections"""
input RecordOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Records."""
  field: RecordOrderField!
}
"""Properties by which Record connections can be ordered."""
enum RecordOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""
RecordWhereInput is used for filtering Record objects.
Input was generated by ent.
"""
input RecordWhereInput {
  not: RecordWhereInput
  and: [RecordWhereInput!]
  or: [RecordWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  """room_id field predicates"""
  roomID: ID
  roomIDNEQ: ID
  roomIDIn: [ID!]
  roomIDNotIn: [ID!]
  """score field predicates"""
  score: Int
  scoreNEQ: Int
  scoreIn: [Int!]
  scoreNotIn: [Int!]
  scoreGT: Int
  scoreGTE: Int
  scoreLT: Int
  scoreLTE: Int
  """room edge predicates"""
  hasRoom: Boolean
  hasRoomWith: [RoomWhereInput!]
}
type Room implements Node {
  id: ID!
  createdBy: String!
  updatedBy: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  name: String!
  closed: Boolean!
  roomUsers: [RoomUser!]
  games: [Game!]
  records: [Record!]
}
"""Ordering options for Room connections"""
input RoomOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Rooms."""
  field: RoomOrderField!
}
"""Properties by which Room connections can be ordered."""
enum RoomOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
}
type RoomUser implements Node {
  id: ID!
  createdBy: String!
  updatedBy: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  userID: ID!
  roomID: ID!
  room: Room!
  user: User!
}
"""Ordering options for RoomUser connections"""
input RoomUserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order RoomUsers."""
  field: RoomUserOrderField!
}
"""Properties by which RoomUser connections can be ordered."""
enum RoomUserOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""
RoomUserWhereInput is used for filtering RoomUser objects.
Input was generated by ent.
"""
input RoomUserWhereInput {
  not: RoomUserWhereInput
  and: [RoomUserWhereInput!]
  or: [RoomUserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  """room_id field predicates"""
  roomID: ID
  roomIDNEQ: ID
  roomIDIn: [ID!]
  roomIDNotIn: [ID!]
  """room edge predicates"""
  hasRoom: Boolean
  hasRoomWith: [RoomWhereInput!]
}
"""
RoomWhereInput is used for filtering Room objects.
Input was generated by ent.
"""
input RoomWhereInput {
  not: RoomWhereInput
  and: [RoomWhereInput!]
  or: [RoomWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """closed field predicates"""
  closed: Boolean
  closedNEQ: Boolean
  """room_users edge predicates"""
  hasRoomUsers: Boolean
  hasRoomUsersWith: [RoomUserWhereInput!]
  """games edge predicates"""
  hasGames: Boolean
  hasGamesWith: [GameWhereInput!]
  """records edge predicates"""
  hasRecords: Boolean
  hasRecordsWith: [RecordWhereInput!]
}
type Squad implements Node {
  id: ID!
  createdBy: String!
  updatedBy: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  missionID: ID!
  userID: ID!
  """是否破坏任务"""
  rat: Boolean!
  mission: Mission!
  user: User!
}
"""Ordering options for Squad connections"""
input SquadOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Squads."""
  field: SquadOrderField!
}
"""Properties by which Squad connections can be ordered."""
enum SquadOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""
SquadWhereInput is used for filtering Squad objects.
Input was generated by ent.
"""
input SquadWhereInput {
  not: SquadWhereInput
  and: [SquadWhereInput!]
  or: [SquadWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """mission_id field predicates"""
  missionID: ID
  missionIDNEQ: ID
  missionIDIn: [ID!]
  missionIDNotIn: [ID!]
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  """rat field predicates"""
  rat: Boolean
  ratNEQ: Boolean
  """mission edge predicates"""
  hasMission: Boolean
  hasMissionWith: [MissionWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""
UpdateCardInput is used for update Card object.
Input was generated by ent.
"""
input UpdateCardInput {
  createdBy: String
  updatedBy: String
  updatedAt: Time
  deletedAt: Time
  name: CardName
  role: CardRole
  tale: String
  addGameUserIDs: [ID!]
  removeGameUserIDs: [ID!]
}
"""
UpdateGameInput is used for update Game object.
Input was generated by ent.
"""
input UpdateGameInput {
  createdBy: String
  updatedBy: String
  updatedAt: Time
  deletedAt: Time
  endBy: GameEndBy
  """游戏人数"""
  capacity: Int
  addGameUserIDs: [ID!]
  removeGameUserIDs: [ID!]
  addMissionIDs: [ID!]
  removeMissionIDs: [ID!]
  clearRoom: Boolean
  roomID: ID
}
"""
UpdateGameUserInput is used for update GameUser object.
Input was generated by ent.
"""
input UpdateGameUserInput {
  createdBy: String
  updatedBy: String
  updatedAt: Time
  deletedAt: Time
  userID: ID
  number: Int
  clearGame: Boolean
  gameID: ID
  clearCard: Boolean
  cardID: ID
}
"""
UpdateMissionInput is used for update Mission object.
Input was generated by ent.
"""
input UpdateMissionInput {
  createdBy: String
  updatedBy: String
  updatedAt: Time
  deletedAt: Time
  sequence: Int
  status: MissionStatus
  failed: Boolean
  """任务人数"""
  capacity: Int
  leader: Int
  clearGame: Boolean
  gameID: ID
  addSquadIDs: [ID!]
  removeSquadIDs: [ID!]
  addMissionVoteIDs: [ID!]
  removeMissionVoteIDs: [ID!]
}
"""
UpdateRecordInput is used for update Record object.
Input was generated by ent.
"""
input UpdateRecordInput {
  createdBy: String
  updatedBy: String
  updatedAt: Time
  deletedAt: Time
  userID: ID
  score: Int
  clearRoom: Boolean
  roomID: ID
}
"""
UpdateRoomInput is used for update Room object.
Input was generated by ent.
"""
input UpdateRoomInput {
  createdBy: String
  updatedBy: String
  updatedAt: Time
  deletedAt: Time
  name: String
  closed: Boolean
  addRoomUserIDs: [ID!]
  removeRoomUserIDs: [ID!]
  addGameIDs: [ID!]
  removeGameIDs: [ID!]
  addRecordIDs: [ID!]
  removeRecordIDs: [ID!]
}
"""
UpdateRoomUserInput is used for update RoomUser object.
Input was generated by ent.
"""
input UpdateRoomUserInput {
  createdBy: String
  updatedBy: String
  updatedAt: Time
  deletedAt: Time
  userID: ID
  clearRoom: Boolean
  roomID: ID
}
"""
UpdateSquadInput is used for update Squad object.
Input was generated by ent.
"""
input UpdateSquadInput {
  createdBy: String
  updatedBy: String
  updatedAt: Time
  deletedAt: Time
  userID: ID
  """是否破坏任务"""
  rat: Boolean
  clearMission: Boolean
  missionID: ID
}
"""
UpdateVoteInput is used for update Vote object.
Input was generated by ent.
"""
input UpdateVoteInput {
  createdBy: String
  updatedBy: String
  updatedAt: Time
  deletedAt: Time
  userID: ID
  pass: Boolean
  clearMission: Boolean
  missionID: ID
}
type Vote implements Node {
  id: ID!
  createdBy: String!
  updatedBy: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
  missionID: ID!
  userID: ID!
  pass: Boolean!
  mission: Mission!
  user: User!
}
"""Ordering options for Vote connections"""
input VoteOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Votes."""
  field: VoteOrderField!
}
"""Properties by which Vote connections can be ordered."""
enum VoteOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""
VoteWhereInput is used for filtering Vote objects.
Input was generated by ent.
"""
input VoteWhereInput {
  not: VoteWhereInput
  and: [VoteWhereInput!]
  or: [VoteWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  """mission_id field predicates"""
  missionID: ID
  missionIDNEQ: ID
  missionIDIn: [ID!]
  missionIDNotIn: [ID!]
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  """pass field predicates"""
  pass: Boolean
  passNEQ: Boolean
  """mission edge predicates"""
  hasMission: Boolean
  hasMissionWith: [MissionWhereInput!]
}

type Mutation {
  createRoom(req: CreateRoomInput!): Room
  joinRoom(req: CreateRoomUserInput!): RoomUser
  leaveRoom(req: CreateRoomUserInput!): RoomUser
  closeRoom(req: RoomRequest!): Room
  createGame(req: RoomRequest!): Game
}

type User @key(fields: "id", resolvable: false) {
  id: ID!
  name: String!
  phone: String!
}
