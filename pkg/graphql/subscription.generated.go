// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
	"github.com/stark-sim/avalon_backend/pkg/ent"
	"github.com/stark-sim/avalon_backend/pkg/graphql/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type SubscriptionResolver interface {
	GetRoomUser(ctx context.Context) (<-chan *ent.RoomUser, error)
	GetRoomUsers(ctx context.Context, req *model.RoomRequest) (<-chan []*ent.RoomUser, error)
	GetRoomOngoingGame(ctx context.Context, req model.RoomRequest) (<-chan *ent.Game, error)
	GetMissionsByGame(ctx context.Context, req model.GameRequest) (<-chan []*ent.Mission, error)
	GetAssassinationByGame(ctx context.Context, req model.GameRequest) (<-chan *model.AssassinInfo, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Subscription_getAssassinationByGame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GameRequest
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNGameRequest2githubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋgraphqlᚋmodelᚐGameRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_getMissionsByGame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GameRequest
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNGameRequest2githubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋgraphqlᚋmodelᚐGameRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_getRoomOngoingGame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RoomRequest
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalNRoomRequest2githubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋgraphqlᚋmodelᚐRoomRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_getRoomUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RoomRequest
	if tmp, ok := rawArgs["req"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("req"))
		arg0, err = ec.unmarshalORoomRequest2ᚖgithubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋgraphqlᚋmodelᚐRoomRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["req"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AssassinInfo_theAssassinatedID(ctx context.Context, field graphql.CollectedField, obj *model.AssassinInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AssassinInfo_theAssassinatedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TheAssassinatedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AssassinInfo_theAssassinatedID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AssassinInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AssassinInfo_tempPickedID(ctx context.Context, field graphql.CollectedField, obj *model.AssassinInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AssassinInfo_tempPickedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TempPickedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AssassinInfo_tempPickedID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AssassinInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_GetRoomUser(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_GetRoomUser(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GetRoomUser(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *ent.RoomUser):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalORoomUser2ᚖgithubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋentᚐRoomUser(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_GetRoomUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoomUser_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_RoomUser_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_RoomUser_updatedBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_RoomUser_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RoomUser_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_RoomUser_deletedAt(ctx, field)
			case "userID":
				return ec.fieldContext_RoomUser_userID(ctx, field)
			case "roomID":
				return ec.fieldContext_RoomUser_roomID(ctx, field)
			case "room":
				return ec.fieldContext_RoomUser_room(ctx, field)
			case "user":
				return ec.fieldContext_RoomUser_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoomUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_getRoomUsers(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_getRoomUsers(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GetRoomUsers(rctx, fc.Args["req"].(*model.RoomRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan []*ent.RoomUser):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalORoomUser2ᚕᚖgithubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋentᚐRoomUser(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_getRoomUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RoomUser_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_RoomUser_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_RoomUser_updatedBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_RoomUser_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RoomUser_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_RoomUser_deletedAt(ctx, field)
			case "userID":
				return ec.fieldContext_RoomUser_userID(ctx, field)
			case "roomID":
				return ec.fieldContext_RoomUser_roomID(ctx, field)
			case "room":
				return ec.fieldContext_RoomUser_room(ctx, field)
			case "user":
				return ec.fieldContext_RoomUser_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoomUser", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_getRoomUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_getRoomOngoingGame(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_getRoomOngoingGame(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GetRoomOngoingGame(rctx, fc.Args["req"].(model.RoomRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *ent.Game):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOGame2ᚖgithubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋentᚐGame(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_getRoomOngoingGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Game_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Game_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Game_updatedBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Game_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Game_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Game_deletedAt(ctx, field)
			case "roomID":
				return ec.fieldContext_Game_roomID(ctx, field)
			case "endBy":
				return ec.fieldContext_Game_endBy(ctx, field)
			case "capacity":
				return ec.fieldContext_Game_capacity(ctx, field)
			case "theAssassinatedID":
				return ec.fieldContext_Game_theAssassinatedID(ctx, field)
			case "gameUsers":
				return ec.fieldContext_Game_gameUsers(ctx, field)
			case "missions":
				return ec.fieldContext_Game_missions(ctx, field)
			case "room":
				return ec.fieldContext_Game_room(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_getRoomOngoingGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_getMissionsByGame(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_getMissionsByGame(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GetMissionsByGame(rctx, fc.Args["req"].(model.GameRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan []*ent.Mission):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNMission2ᚕᚖgithubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋentᚐMissionᚄ(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_getMissionsByGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Mission_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_Mission_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Mission_updatedBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Mission_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Mission_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Mission_deletedAt(ctx, field)
			case "sequence":
				return ec.fieldContext_Mission_sequence(ctx, field)
			case "status":
				return ec.fieldContext_Mission_status(ctx, field)
			case "failed":
				return ec.fieldContext_Mission_failed(ctx, field)
			case "gameID":
				return ec.fieldContext_Mission_gameID(ctx, field)
			case "capacity":
				return ec.fieldContext_Mission_capacity(ctx, field)
			case "leaderID":
				return ec.fieldContext_Mission_leaderID(ctx, field)
			case "game":
				return ec.fieldContext_Mission_game(ctx, field)
			case "squads":
				return ec.fieldContext_Mission_squads(ctx, field)
			case "votes":
				return ec.fieldContext_Mission_votes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Mission", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_getMissionsByGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_getAssassinationByGame(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_getAssassinationByGame(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().GetAssassinationByGame(rctx, fc.Args["req"].(model.GameRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.AssassinInfo):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOAssassinInfo2ᚖgithubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋgraphqlᚋmodelᚐAssassinInfo(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_getAssassinationByGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "theAssassinatedID":
				return ec.fieldContext_AssassinInfo_theAssassinatedID(ctx, field)
			case "tempPickedID":
				return ec.fieldContext_AssassinInfo_tempPickedID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AssassinInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_getAssassinationByGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputGameRequest(ctx context.Context, obj interface{}) (model.GameRequest, error) {
	var it model.GameRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoomRequest(ctx context.Context, obj interface{}) (model.RoomRequest, error) {
	var it model.RoomRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var assassinInfoImplementors = []string{"AssassinInfo"}

func (ec *executionContext) _AssassinInfo(ctx context.Context, sel ast.SelectionSet, obj *model.AssassinInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assassinInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AssassinInfo")
		case "theAssassinatedID":

			out.Values[i] = ec._AssassinInfo_theAssassinatedID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tempPickedID":

			out.Values[i] = ec._AssassinInfo_tempPickedID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "GetRoomUser":
		return ec._Subscription_GetRoomUser(ctx, fields[0])
	case "getRoomUsers":
		return ec._Subscription_getRoomUsers(ctx, fields[0])
	case "getRoomOngoingGame":
		return ec._Subscription_getRoomOngoingGame(ctx, fields[0])
	case "getMissionsByGame":
		return ec._Subscription_getMissionsByGame(ctx, fields[0])
	case "getAssassinationByGame":
		return ec._Subscription_getAssassinationByGame(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNGameRequest2githubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋgraphqlᚋmodelᚐGameRequest(ctx context.Context, v interface{}) (model.GameRequest, error) {
	res, err := ec.unmarshalInputGameRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoomRequest2githubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋgraphqlᚋmodelᚐRoomRequest(ctx context.Context, v interface{}) (model.RoomRequest, error) {
	res, err := ec.unmarshalInputRoomRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAssassinInfo2ᚖgithubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋgraphqlᚋmodelᚐAssassinInfo(ctx context.Context, sel ast.SelectionSet, v *model.AssassinInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AssassinInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalORoomRequest2ᚖgithubᚗcomᚋstarkᚑsimᚋavalon_backendᚋpkgᚋgraphqlᚋmodelᚐRoomRequest(ctx context.Context, v interface{}) (*model.RoomRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoomRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
