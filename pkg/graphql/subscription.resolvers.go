package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/go-redis/redis/v9"
	"github.com/sirupsen/logrus"
	"github.com/stark-sim/avalon_backend/internal/db"
	"github.com/stark-sim/avalon_backend/internal/logic"
	"github.com/stark-sim/avalon_backend/pkg/ent"
	"github.com/stark-sim/avalon_backend/pkg/ent/card"
	"github.com/stark-sim/avalon_backend/pkg/ent/game"
	"github.com/stark-sim/avalon_backend/pkg/ent/gameuser"
	"github.com/stark-sim/avalon_backend/pkg/ent/mission"
	"github.com/stark-sim/avalon_backend/pkg/ent/room"
	"github.com/stark-sim/avalon_backend/pkg/ent/roomuser"
	"github.com/stark-sim/avalon_backend/pkg/ent/squad"
	"github.com/stark-sim/avalon_backend/pkg/ent/vote"
	"github.com/stark-sim/avalon_backend/pkg/graphql/model"
	"github.com/stark-sim/avalon_backend/tools"
	"github.com/stark-sim/avalon_backend/tools/cache"
)

// User is the resolver for the user field.
func (r *gameUserResolver) User(ctx context.Context, obj *ent.GameUser) (*model.User, error) {
	user, err := GetUserAtResolver(ctx, obj.UserID)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// CreateRoom is the resolver for the createRoom field.
func (r *mutationResolver) CreateRoom(ctx context.Context, req ent.CreateRoomInput) (*ent.Room, error) {
	_room, err := r.client.Room.Create().SetInput(req).Save(ctx)
	if err != nil {
		logrus.Errorf("create room %+v: %v", req, err)
		return nil, err
	}
	// 在 redis 中设置 房间快捷码
	redisClient := cache.NewRedisClient()
	defer redisClient.Close()
	_, err = redisClient.SetRoomIDByShortCode(ctx, _room.ID)
	if err != nil {
		return nil, err
	}
	return _room, nil
}

// JoinRoom is the resolver for the joinRoom field.
func (r *mutationResolver) JoinRoom(ctx context.Context, req ent.CreateRoomUserInput) (*ent.RoomUser, error) {
	roomUser, err := logic.JoinRoom(ctx, r.client, req.RoomID, req.UserID)
	if err != nil {
		return nil, err
	}
	return roomUser, nil
}

// LeaveRoom is the resolver for the leaveRoom field.
func (r *mutationResolver) LeaveRoom(ctx context.Context, req ent.CreateRoomUserInput) (*ent.RoomUser, error) {
	redisClient := cache.NewRedisClient()
	defer redisClient.Close()
	var roomUser *ent.RoomUser
	if err := db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		// 离开前查看房间剩余人数，要抢信号量锁住 RoomUser 表新增
		if err := redisClient.WaitRoomMutex(ctx, req.RoomID); err != nil {
			return err
		}
		count, err := tx.RoomUser.Query().Where(roomuser.RoomID(req.RoomID), roomuser.DeletedAt(tools.ZeroTime)).Count(ctx)
		if err != nil {
			logrus.Errorf("query room %d user count before leave room: %v", req.RoomID, err)
			return err
		}
		// 查找后就可以释放信号量，因为加入房间时检查 Room.Closed 依赖 ReadCommitted 就足够，不需要信号量
		if err = redisClient.ReleaseRoomMutex(ctx, req.RoomID); err != nil {
			return err
		}
		// 自己退出，由于需要返回，先查询出来
		roomUser, err = tx.RoomUser.
			Query().
			Where(roomuser.RoomID(req.RoomID), roomuser.UserID(req.UserID), roomuser.DeletedAt(tools.ZeroTime)).
			WithRoom().
			First(ctx)
		if err != nil {
			logrus.Errorf("query roomUser of user %d in room %d when leave room: %v", req.UserID, req.RoomID, err)
			return err
		}
		if err = tx.RoomUser.
			UpdateOne(roomUser).
			SetDeletedAt(time.Now()).
			SetHost(false).
			Exec(ctx); err != nil {
			logrus.Errorf("update roomUser %d when leave room: %v", roomUser.ID, err)
			return err
		}
		if count == 1 {
			// 如果只剩自己一个人，还需要关闭房间，并清除 shortCode
			_, err = tx.Room.UpdateOneID(req.RoomID).SetClosed(true).Save(ctx)
			if err != nil {
				logrus.Errorf("close room %d when user %d leave room: %v", req.RoomID, req.UserID, err)
				return err
			}
			if err = redisClient.DeleteRoomIDWithShortCode(ctx, req.RoomID); err != nil {
				return err
			}
		} else {
			// 如果还有别人，并且自己是房主，那么要把房主丢给别人
			if roomUser.Host {
				anotherRoomUser, err := tx.RoomUser.
					Query().
					Where(roomuser.RoomID(req.RoomID), roomuser.UserIDNEQ(req.UserID), roomuser.DeletedAt(tools.ZeroTime)).
					First(ctx)
				if err != nil {
					logrus.Errorf("query another roomUser when host user %d of room %d leave room: %v", req.UserID, req.RoomID, err)
					return err
				}
				err = tx.RoomUser.UpdateOne(anotherRoomUser).SetHost(true).Exec(ctx)
				if err != nil {
					logrus.Errorf("set another roomUser %d to be host: %v", anotherRoomUser.ID, err)
					return err
				}
			}
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return roomUser, nil
}

// CloseRoom is the resolver for the closeRoom field.
func (r *mutationResolver) CloseRoom(ctx context.Context, req model.RoomRequest) (*ent.Room, error) {
	roomID := tools.StringToInt64(req.ID)
	_room, err := r.client.Room.UpdateOneID(roomID).SetClosed(true).Save(ctx)
	if err != nil {
		logrus.Errorf("close room %d: %v", roomID, err)
		return nil, err
	}
	// 将 redis 中的 房间快捷码 清除
	redisClient := cache.NewRedisClient()
	defer redisClient.Close()
	if err = redisClient.DeleteRoomIDWithShortCode(ctx, _room.ID); err != nil {
		return nil, err
	}
	return _room, nil
}

// CreateGame is the resolver for the createGame field.
func (r *mutationResolver) CreateGame(ctx context.Context, req model.CreateGameRequest) (*ent.Game, error) {
	roomID := tools.StringToInt64(req.RoomID)
	var _game *ent.Game
	if err := db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		// 将房间中现有的人加入到一局新游戏里
		// 先检查房间没有在进行游戏
		_room, err := tx.Room.
			Query().
			Where(room.ID(roomID), room.DeletedAt(tools.ZeroTime), room.GameOn(false)).
			First(ctx)
		if err != nil {
			if ent.IsNotFound(err) {
				logrus.Errorf("room %d not exist or gameOn, can't create game: %v", roomID, err)
				return err
			} else {
				logrus.Errorf("query room %d before create game: %v", roomID, err)
				return err
			}
		}
		err = tx.Room.UpdateOne(_room).SetGameOn(true).Exec(ctx)
		if err != nil {
			logrus.Errorf("room %d update when create game: %v", roomID, err)
			return err
		}
		// 把当前在房间里的人拉近游戏里，不锁了，开了后进来的不管，用户离开房间前查一下有没有在游戏里就好，离开和这里的查人会制衡
		roomUsers, err := tx.RoomUser.Query().Where(roomuser.RoomID(roomID), roomuser.DeletedAt(tools.ZeroTime)).All(ctx)
		if err != nil {
			logrus.Errorf("query roomUser when room %d create game: %v", roomID, err)
			return err
		}
		playerNum := uint8(len(roomUsers))
		// 创建游戏
		_game, err = tx.Game.
			Create().
			SetRoomID(roomID).
			SetResult(game.ResultNone).
			SetCapacity(playerNum).
			SetTheAssassinatedIds([]string{}).
			SetClosed(false).
			Save(ctx)
		if err != nil {
			logrus.Errorf("create game of room %d: %v", roomID, err)
			return err
		}
		// 随机排序房间内用户和洗牌，然后创建 GameUser
		userIDs := make([]int64, playerNum)
		for i, roomUser := range roomUsers {
			userIDs[i] = roomUser.UserID
		}
		for i, v := range tools.Shuffle(userIDs) {
			userIDs[i] = v.(int64)
		}
		// 按人数拿牌，拿的时候已经洗好了
		cards, err := logic.GetShuffledCardsByNum(ctx, playerNum, nil)
		if err != nil {
			return err
		}
		// 创建 GameUser，分牌分号
		gameUserCreates := make([]*ent.GameUserCreate, playerNum)
		for i := 0; i < len(roomUsers); i++ {
			gameUserCreates[i] = tx.GameUser.
				Create().
				SetGameID(_game.ID).
				SetUserID(userIDs[i]).
				SetCardID(cards[i].ID).
				SetNumber(uint8(i + 1))
		}
		_, err = tx.GameUser.CreateBulk(gameUserCreates...).Save(ctx)
		if err != nil {
			logrus.Errorf("bulk create gameUsers of room %d: %v", roomID, err)
			return err
		}
		// 创建 5 个 Mission，初始队长为 1-5 号玩家
		// TODO: 自定义游戏创建选项
		missionCreates := make([]*ent.MissionCreate, 5)
		for i := 0; i < 5; i++ {
			var protected bool
			if i == 4 {
				protected = true
			} else {
				protected = false
			}
			missionCreates[i] = tx.Mission.
				Create().
				SetGameID(_game.ID).
				SetLeaderID(userIDs[i]).
				SetCapacity(logic.GetMissionCapacityByNumAndSeq(playerNum, i+1)).
				SetSequence(uint8(i + 1)).
				SetProtected(protected)
		}
		_, err = tx.Mission.CreateBulk(missionCreates...).Save(ctx)
		if err != nil {
			logrus.Errorf("bulk creating missions of room %d: %v", roomID, err)
			return err
		}
		// 创建完毕，现在准备返回，把有可能需要的 EagerLoad 上
		_game, err = tx.Game.
			Query().
			Where(game.ID(_game.ID)).
			WithNamedMissions("missions").
			WithNamedGameUsers("gameUsers", func(query *ent.GameUserQuery) {
				query.WithCard()
			}).
			First(ctx)
		if err != nil {
			logrus.Errorf("query game when created from room %d: %v", roomID, err)
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return _game, nil
}

// CreateCard is the resolver for the createCard field.
func (r *mutationResolver) CreateCard(ctx context.Context, req ent.CreateCardInput) (*ent.Card, error) {
	var tale string
	if req.Tale != nil {
		tale = *req.Tale
	}
	return r.client.Card.Create().SetName(*req.Name).SetRole(req.Role).SetTale(tale).Save(ctx)
}

// TempPickSquads is the resolver for the tempPickSquads field.
func (r *mutationResolver) TempPickSquads(ctx context.Context, req []*ent.CreateSquadInput) ([]string, error) {
	// 实时预选小队信息
	missionID := ""
	userIDs := make([]string, len(req))
	for i, v := range req {
		if missionID == "" {
			missionID = strconv.FormatInt(v.MissionID, 10)
		} else {
			if strconv.FormatInt(v.MissionID, 10) != missionID {
				return nil, errors.New("missionID not the same")
			}
		}
		userIDs[i] = strconv.FormatInt(v.UserID, 10)
	}
	// 不检查数据库，直接存在 redis 缓存中待用
	if missionID == "0" {
		return nil, errors.New("missionID cannot be 0")
	}
	cacheClient := cache.NewRedisClient()
	defer cacheClient.Close()
	if err := cacheClient.SetMissionTempPickUserIDs(ctx, missionID, userIDs); err != nil {
		logrus.Errorf("set mission %d temp pick userIDs: %v", missionID, err)
		return nil, err
	}
	return userIDs, nil
}

// PickSquads is the resolver for the pickSquads field.
func (r *mutationResolver) PickSquads(ctx context.Context, req []*ent.CreateSquadInput) ([]*ent.Squad, error) {
	var squads []*ent.Squad
	if err := db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		// 队长选任务小队人数，选好后任务进去投票阶段，并且为大家创建 Vote
		// 检查 1. 小队任务的是同一个 2. 小队人数和任务任务相等 3. 小队人员在任务所属游戏中
		missionID := int64(0)
		userIDs := make([]int64, len(req))
		for i, v := range req {
			if missionID == 0 {
				missionID = v.MissionID
			} else if missionID != v.MissionID {
				return errors.New("squads' mission_id not the same")
			}
			userIDs[i] = req[i].UserID
		}
		if missionID == 0 {
			return errors.New("squads' mission_id is 0")
		}
		_mission, err := tx.Mission.
			Query().
			Where(
				mission.ID(missionID),
				mission.DeletedAt(tools.ZeroTime),
				mission.StatusEQ(mission.StatusPicking),
			).
			First(ctx)
		if err != nil {
			logrus.Errorf("query mission %d when pick squads: %v", missionID, err)
			return err
		}
		if _mission.Capacity != uint8(len(userIDs)) {
			return errors.New(fmt.Sprintf("squad number %d doesn't match mission %d 's capacity %d", len(userIDs), missionID, _mission.Capacity))
		}
		// 通过查目标玩家和这局游戏中的玩家数量和 id 对得上来判断是不是属于这局游戏
		count, err := tx.GameUser.
			Query().
			Where(
				gameuser.GameID(_mission.GameID),
				gameuser.UserIDIn(userIDs...),
				gameuser.DeletedAt(tools.ZeroTime),
			).Count(ctx)
		if err != nil {
			logrus.Errorf("query game users count of mission %d: %v", missionID, err)
			return err
		}
		if count != len(userIDs) {
			return errors.New("squad users not in squad's game")
		}
		// 检查完毕，开始创建 Squad
		squadCreates := make([]*ent.SquadCreate, len(userIDs))
		for i, v := range userIDs {
			squadCreates[i] = tx.Squad.
				Create().
				SetMissionID(missionID).
				SetUserID(v)
		}
		squads, err = tx.Squad.CreateBulk(squadCreates...).Save(ctx)
		if err != nil {
			logrus.Errorf("bulk creating squads at pick squads of mission %d: %v", missionID, err)
			return err
		}
		// 创建 Vote
		// 只需要先找出 gameUsers 里的 userIDs 就好，不需要其他数据
		var allUserIDs []struct {
			UserID int64 `json:"user_id"`
		}
		if err = tx.GameUser.Query().
			Where(gameuser.GameID(_mission.GameID), gameuser.DeletedAt(tools.ZeroTime)).
			Select(gameuser.FieldUserID).
			Scan(ctx, &allUserIDs); err != nil {
			logrus.Errorf("query game %d userIDs at create votes: %v", _mission.GameID, err)
			return err
		}
		voteCreates := make([]*ent.VoteCreate, len(allUserIDs))
		for i, v := range allUserIDs {
			// 如果用户是该任务的 leader，那么该 Vote 已经决定且通过
			if v.UserID == _mission.LeaderID {
				voteCreates[i] = tx.Vote.
					Create().
					SetUserID(v.UserID).
					SetMissionID(_mission.ID).
					SetPass(true).
					SetVoted(true)
			} else {
				voteCreates[i] = tx.Vote.
					Create().
					SetUserID(v.UserID).
					SetMissionID(_mission.ID)
			}
		}
		if err = tx.Vote.CreateBulk(voteCreates...).Exec(ctx); err != nil {
			logrus.Errorf("bulk creating votes of mission %d at pick squads: %v", missionID, err)
			return err
		}
		// 新增 Squad 和 Vote 后别忘了修改 Mission 状态为 voting
		_, err = tx.Mission.UpdateOne(_mission).SetStatus(mission.StatusVoting).Save(ctx)
		if err != nil {
			logrus.Errorf("updating mission %d 's status to voting: %v", missionID, err)
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return squads, nil
}

// Vote is the resolver for the vote field.
func (r *mutationResolver) Vote(ctx context.Context, req model.VoteRequest) (*ent.Vote, error) {
	var _vote *ent.Vote
	if err := db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		var err error
		_vote, err = tx.Vote.UpdateOneID(tools.StringToInt64(req.VoteID)).SetPass(req.Pass).SetVoted(true).Save(ctx)
		if err != nil {
			logrus.Errorf("updating vote %s when voting: %v", req.VoteID, err)
			return err
		}
		// 如果大家都投票完了，那么更改 Mission 的状态
		votes, err := tx.Vote.Query().Where(vote.MissionID(_vote.MissionID), vote.DeletedAt(tools.ZeroTime)).All(ctx)
		if err != nil {
			logrus.Errorf("query all votes of mission %d when voting: %v", _vote.MissionID, err)
			return err
		}
		allVoted := true
		passCount := 0
		notPassCount := 0
		// 检查是否都投票好了，和投票结果
		for _, v := range votes {
			if !v.Voted {
				allVoted = false
				break
			}
			if v.Pass {
				passCount += 1
			} else {
				notPassCount += 1
			}
		}
		if allVoted {
			// 如果全投票好，那么任务需要进行进一步处理
			_mission, err := tx.Mission.Query().Where(mission.ID(_vote.MissionID), mission.DeletedAt(tools.ZeroTime)).First(ctx)
			if err != nil {
				logrus.Errorf("querying mission %d when voting %d of mission %d: %v", _vote.MissionID, _vote.ID, _vote.MissionID, err)
				return err
			}
			// 判断流局还是继续进行
			if notPassCount > passCount {
				// 流局的话，当前任务状态改变，新增一个任务
				if err = tx.Mission.UpdateOne(_mission).SetStatus(mission.StatusDelayed).Exec(ctx); err != nil {
					logrus.Errorf("update mission %d to status delayed when voting %d: %v", _mission.ID, _vote.ID, err)
					return err
				}
				// 流局要创建新的任务，并且后续任务的 Leader 都往前挪一位
				// 先把后面的 Mission 找出来
				postMissions, err := tx.Mission.Query().Where(mission.SequenceGT(_mission.Sequence), mission.DeletedAt(tools.ZeroTime)).All(ctx)
				if err != nil {
					logrus.Errorf("query postMissions when current mission %d delayed: %v", _mission.ID, err)
					return err
				}
				// 再把 GameUser 中的 userID 按 number 找出来
				var inGameUserIDs []struct {
					UserID int64 `json:"user_id"`
				}
				err = tx.GameUser.Query().
					Where(gameuser.GameID(_mission.GameID), gameuser.DeletedAt(tools.ZeroTime)).
					Order(ent.Desc(gameuser.FieldNumber)).
					Select(gameuser.FieldUserID).
					Scan(ctx, &inGameUserIDs)
				if err != nil {
					logrus.Errorf("query userIDs when mission %d delayed: %v", _mission.ID, err)
					return err
				}
				// 准备更新 Leader 的对应映射表，由于不知道是随机模式还是顺序 Leader 模式
				// 第一个 leader 给到因流局而新建的局，
				// 中间的 leader 则往前挪，
				// 最后的新 leader 是号码最大的 leader 的下一位
				//var maxLeaderNumber uint8
				delayLeaderIDMap := make(map[int64]int64, 0)
				for i, postMission := range postMissions {
					// 最后一个特殊处理
					if i+1 != len(postMissions) {
						// 其它前挪一位
						delayLeaderIDMap[postMission.LeaderID] = postMissions[i+1].LeaderID
					}
				}
				// 之后的任务的 leader 更新，第一个 leader 作为流局重开局的 leader
				newMissionLeaderID := postMissions[0].LeaderID
				for _, postMission := range postMissions {
					if err = tx.Mission.UpdateOne(postMission).SetLeaderID(delayLeaderIDMap[postMission.LeaderID]).Exec(ctx); err != nil {
						logrus.Errorf("update leaderID of postMission when current mission %d delayed: %v", _mission.ID, err)
						return err
					}
				}
				// 创建新任务
				err = tx.Mission.Create().
					SetGameID(_mission.GameID).
					SetSequence(_mission.Sequence).
					SetLeaderID(newMissionLeaderID).
					SetCapacity(_mission.Capacity).
					Exec(ctx)
				if err != nil {
					logrus.Errorf("create new mission when current mission %d delayed: %v", _mission.ID, err)
					return err
				}
			} else {
				// 没有流局，进入任务执行阶段
				if err = tx.Mission.UpdateOne(_mission).SetStatus(mission.StatusActing).Exec(ctx); err != nil {
					logrus.Errorf("update mission %d to status acting: %v", _mission.ID, err)
					return err
				}
			}
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return _vote, nil
}

// Act is the resolver for the act field.
func (r *mutationResolver) Act(ctx context.Context, req model.ActRequest) (*ent.Squad, error) {
	var _squad *ent.Squad
	if err := db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		// 执行任务是否破坏
		var err error
		_squad, err = tx.Squad.UpdateOneID(tools.StringToInt64(req.SquadID)).SetRat(req.Rat).SetActed(true).Save(ctx)
		if err != nil {
			logrus.Errorf("update squad %s when act: %v", req.SquadID, err)
			return err
		}
		// 执行后判断是不是小队成员都执行完了
		allActed := true
		squads, err := tx.Squad.Query().Where(squad.MissionID(_squad.MissionID), squad.DeletedAt(tools.ZeroTime)).All(ctx)
		ratCount := 0
		for _, v := range squads {
			if !v.Acted {
				allActed = false
				break
			}
			if v.Rat {
				ratCount += 1
			}
		}
		// 全部执行完毕，任务结束，判断任务成功与否
		if allActed {
			_mission, err := tx.Mission.Query().Where(mission.ID(_squad.MissionID), mission.DeletedAt(tools.ZeroTime)).First(ctx)
			if err != nil {
				logrus.Errorf("query mission %d when all squads acted: %v", _squad.MissionID, err)
				return err
			}
			missionFailed := false
			if ratCount > 0 {
				// 保护轮
				if _mission.Protected && ratCount <= 1 {
					missionFailed = false
				} else {
					missionFailed = true
				}
			}
			// 任务无论失败与否，都结束了
			if err = tx.Mission.UpdateOne(_mission).SetStatus(mission.StatusClosed).SetFailed(missionFailed).Exec(ctx); err != nil {
				logrus.Errorf("update mission %d when mission closed at acting: %v", _mission.ID, err)
				return err
			}
			// 如果目前任务失败，则判断有没有一共失败了 3 次，如果有，游戏由红方胜利结束
			if missionFailed {
				failedMissionCount, err := tx.Mission.Query().
					Where(
						mission.GameID(_mission.GameID),
						mission.DeletedAt(tools.ZeroTime),
						mission.StatusEQ(mission.StatusClosed),
						mission.Failed(true),
					).
					Count(ctx)
				if err != nil {
					logrus.Errorf("query missions when final act is done: %v", err)
					return err
				}
				// 如果失败次数达到三次，则红方胜利，游戏结束
				if failedMissionCount >= 3 {
					// 游戏结束，红方胜利，结束方式为红方直接获胜
					_, err := tx.Game.UpdateOneID(_mission.GameID).
						SetResult(game.ResultRed).
						Save(ctx)
					if err != nil {
						logrus.Errorf("update game %d to red when final act is done: %v", _mission.GameID, err)
						return err
					}
				}
			}
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return _squad, nil
}

// TempAssassinate is the resolver for the tempAssassinate field.
func (r *mutationResolver) TempAssassinate(ctx context.Context, req model.AssassinateRequest) ([]string, error) {
	// 缓存临时刺杀目标
	cacheClient := cache.NewRedisClient()
	defer cacheClient.Close()
	err := cacheClient.SetGameTempAssassinatedIDs(ctx, req.GameID, req.TheAssassinatedIDs)
	if err != nil {
		return nil, err
	}
	return req.TheAssassinatedIDs, nil
}

// Assassinate is the resolver for the assassinate field.
func (r *mutationResolver) Assassinate(ctx context.Context, req model.AssassinateRequest) (*ent.Game, error) {
	cacheClient := cache.NewRedisClient()
	defer cacheClient.Close()
	// 刺杀时可以删除游戏的暂时刺杀目标缓存
	err := cacheClient.DeleteGameTempAssassinatedIDs(ctx, req.GameID)
	if err != nil {
		return nil, err
	}
	var _game *ent.Game
	if err = db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		_game, err = tx.Game.Query().Where(game.ID(tools.StringToInt64(req.GameID)), game.DeletedAt(tools.ZeroTime)).First(ctx)
		if err != nil {
			logrus.Errorf("query game %s when assassinate: %v", req.GameID, err)
			return err
		}
		// 把刺杀的游戏玩家找到
		theAssassinatedIDs := make([]int64, len(req.TheAssassinatedIDs))
		for i, theAssassinatedID := range req.TheAssassinatedIDs {
			theAssassinatedIDs[i] = tools.StringToInt64(theAssassinatedID)
		}
		gameUsers, err := tx.GameUser.Query().
			Where(gameuser.GameID(_game.ID), gameuser.DeletedAt(tools.ZeroTime), gameuser.UserIDIn(theAssassinatedIDs...)).
			WithCard().
			All(ctx)
		if err != nil {
			logrus.Errorf("query target gameUsers %v when assassinate: %v", theAssassinatedIDs, err)
			return err
		}
		// 看看杀没杀到梅林
		merlinDead := false
		for _, gameUser := range gameUsers {
			tempCard, err := gameUser.Card(ctx)
			if err != nil {
				logrus.Errorf("query gameUsers with card: %v", err)
				return err
			}
			if tempCard.Name == card.NameMerlin {
				// 游戏结束，红方胜利，结束方式为刺杀成功
				_game, err = tx.Game.UpdateOne(_game).
					SetResult(game.ResultAssassination).
					SetTheAssassinatedIds(req.TheAssassinatedIDs).
					Save(ctx)
				if err != nil {
					logrus.Errorf("update game %d when merlin dead: %v", _game.ID, err)
					return err
				}
				// 梅林阵亡
				merlinDead = true
				break
			}
		}
		// 梅林没死
		if !merlinDead {
			// 游戏结束，蓝方获胜
			_game, err = tx.Game.UpdateOne(_game).
				SetResult(game.ResultBlue).
				SetTheAssassinatedIds(req.TheAssassinatedIDs).
				Save(ctx)
			if err != nil {
				logrus.Errorf("update game %d when merlin survive: %v", _game.ID, err)
				return err
			}
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return _game, nil
}

// JoinRoomByShortCode is the resolver for the joinRoomByShortCode field.
func (r *mutationResolver) JoinRoomByShortCode(ctx context.Context, req model.JoinRoomInput) (*ent.RoomUser, error) {
	cacheClient := cache.NewRedisClient()
	defer cacheClient.Close()
	roomID, err := cacheClient.GetRoomIDByShortCode(ctx, req.ShortCode)
	if err != nil {
		if err == redis.Nil {
			return nil, fmt.Errorf("short_code %s not exist", req.ShortCode)
		} else {
			return nil, err
		}
	}
	roomUser, err := logic.JoinRoom(ctx, r.client, roomID, tools.StringToInt64(req.UserID))
	if err != nil {
		return nil, err
	}
	return roomUser, nil
}

// TerminateGame is the resolver for the terminateGame field.
func (r *mutationResolver) TerminateGame(ctx context.Context, req model.GameRequest) (*ent.Game, error) {
	var _game *ent.Game
	if err := db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		var err error
		// 游戏修改状态为手动终止，并且游戏直接关闭
		_game, err = tx.Game.UpdateOneID(tools.StringToInt64(req.ID)).SetResult(game.ResultHand).SetClosed(true).Save(ctx)
		if err != nil {
			logrus.Errorf("error at terminate game: %v", err)
			return err
		}
		// 所有游戏人员被踢出游戏
		if err = tx.GameUser.Update().Where(gameuser.GameID(_game.ID), gameuser.DeletedAt(tools.ZeroTime)).SetExited(true).Exec(ctx); err != nil {
			logrus.Errorf("update gameUsers when game %d terminated: %v", _game.ID, err)
			return err
		}
		// 房间变回无进行游戏状态
		if err = tx.Room.UpdateOneID(_game.RoomID).SetGameOn(false).Exec(ctx); err != nil {
			logrus.Errorf("update room %d when terminate game %d: %v", _game.RoomID, _game.ID, err)
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return _game, nil
}

// ExitGame is the resolver for the exitGame field.
func (r *mutationResolver) ExitGame(ctx context.Context, req model.GameUserRequest) (*ent.GameUser, error) {
	// 当游戏已出结果后，用户可以离开游戏，所有人离开后，游戏才算关闭，可以进行下一把
	var gameUser *ent.GameUser
	if err := db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		// 先检查游戏是否已有结果
		_game, err := tx.Game.Query().Where(game.ID(tools.StringToInt64(req.GameID)), game.DeletedAt(tools.ZeroTime)).First(ctx)
		if err != nil {
			logrus.Errorf("query game %s when user %s exiting: %v", req.GameID, req.UserID, err)
			return err
		}
		if _game.Result == game.ResultNone {
			return fmt.Errorf("game %d is not ended, user %s cann't leave", _game.ID, req.UserID)
		}
		// 将自己退出
		if err = tx.GameUser.Update().
			Where(gameuser.GameID(_game.ID), gameuser.UserID(tools.StringToInt64(req.UserID)), gameuser.DeletedAt(tools.ZeroTime)).
			SetExited(true).
			Exec(ctx); err != nil {
			logrus.Errorf("update user %s from game %d when exiting: %v", req.UserID, _game.ID, err)
			return err
		}
		// 退出后检查是不是游戏里没人了，如果没人了，那么游戏关闭，房间变回无游戏状态
		inGameUsersCount, err := tx.GameUser.Query().
			Where(gameuser.GameID(_game.ID), gameuser.Exited(false), gameuser.DeletedAt(tools.ZeroTime)).
			Count(ctx)
		if err != nil {
			logrus.Errorf("query still in game %d users count when user %s exited: %v", _game.ID, req.UserID, err)
			return err
		}
		// 如果没人了，执行更新操作
		if inGameUsersCount == 0 {
			if err = tx.Game.UpdateOne(_game).SetClosed(true).Exec(ctx); err != nil {
				logrus.Errorf("update game %d to be closed when user %s exited: %v", _game.ID, req.UserID, err)
				return err
			}
			if err = tx.Room.UpdateOneID(_game.RoomID).SetGameOn(false).Exec(ctx); err != nil {
				logrus.Errorf("update room %d to be not game on when user %s exited from game %d: %v", _game.RoomID, req.UserID, _game.ID, err)
				return err
			}
		}
		// 为了返回，查询 gameUser
		gameUser, err = tx.GameUser.Query().Where(gameuser.GameID(_game.ID), gameuser.UserID(tools.StringToInt64(req.UserID)), gameuser.DeletedAt(tools.ZeroTime)).First(ctx)
		if err != nil {
			logrus.Errorf("query gameUser of user %s from game %d when exited: %v", req.UserID, _game.ID, err)
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return gameUser, nil
}

// ReentryEndedGame is the resolver for the reentryEndedGame field.
func (r *mutationResolver) ReentryEndedGame(ctx context.Context, req model.GameUserRequest) (*ent.GameUser, error) {
	// 重新进入已结束但还没关闭的游戏中
	var gameUser *ent.GameUser
	if err := db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		// 首先用户是得原来在这个游戏中的
		var err error
		gameUser, err = tx.GameUser.Query().Where(gameuser.GameID(tools.StringToInt64(req.GameID)), gameuser.UserID(tools.StringToInt64(req.UserID)), gameuser.DeletedAt(tools.ZeroTime)).First(ctx)
		if err != nil {
			logrus.Errorf("query gameUser of user %s from game %s: %v", req.UserID, req.GameID, err)
			return err
		}
		if gameUser.Exited == false {
			return fmt.Errorf("user %s already in game %s", req.UserID, req.GameID)
		}
		// 其次游戏不能已关闭
		_, err = tx.Game.Query().Where(game.ID(gameUser.GameID), game.Closed(false), game.DeletedAt(tools.ZeroTime)).First(ctx)
		if err != nil {
			if ent.IsNotFound(err) {
				return fmt.Errorf("game %s is closed, user %s can't reentry", req.GameID, req.UserID)
			} else {
				logrus.Errorf("query open game %s when user %s reentry: %v", req.GameID, req.UserID, err)
				return err
			}
		}
		// 更新 gameUser 状态
		if err = tx.GameUser.UpdateOne(gameUser).SetExited(false).Exec(ctx); err != nil {
			logrus.Errorf("update gameUser %d to be not exited: %v", gameUser.ID, err)
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return gameUser, nil
}

// GetJoinedRoom is the resolver for the getJoinedRoom field.
func (r *queryResolver) GetJoinedRoom(ctx context.Context, req model.UserRequest) (*ent.Room, error) {
	// 查询 room 没有关闭的，且具有 roomUser 的
	userID := tools.StringToInt64(req.ID)
	_room, err := r.client.Room.Query().
		Where(
			room.DeletedAt(tools.ZeroTime),
			room.Closed(false),
			room.HasRoomUsersWith(
				roomuser.DeletedAt(tools.ZeroTime),
				roomuser.UserID(userID),
			),
		).
		First(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, nil
		} else {
			logrus.Errorf("query user %s joined room: %v", req.ID, err)
			return nil, err
		}
	}
	return _room, nil
}

// GetVoteInMission is the resolver for the getVoteInMission field.
func (r *queryResolver) GetVoteInMission(ctx context.Context, req ent.VoteWhereInput) (*ent.Vote, error) {
	// 投票阶段看看自己需不需要投票
	userID := req.UserID
	missionID := req.MissionID
	if userID == nil || missionID == nil {
		return nil, errors.New("userID and missionID can't be null")
	}
	// 投好票的也返回，让前端可以通过数据恢复自己的投票状态
	_vote, err := r.client.Vote.Query().Where(vote.UserID(*userID), vote.MissionID(*missionID), vote.DeletedAt(tools.ZeroTime)).First(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	} else if err != nil {
		logrus.Errorf("error at query vote in mission: %v", err)
		return nil, err
	} else {
		return _vote, nil
	}
}

// GetSquadInMission is the resolver for the getSquadInMission field.
func (r *queryResolver) GetSquadInMission(ctx context.Context, req ent.SquadWhereInput) (*ent.Squad, error) {
	// 执行阶段查看是否要操作 Act
	userID := req.UserID
	missionID := req.MissionID
	if userID == nil || missionID == nil {
		return nil, errors.New("userID and missionID can't be null")
	}
	_squad, err := r.client.Squad.Query().Where(squad.UserID(*userID), squad.MissionID(*missionID), squad.DeletedAt(tools.ZeroTime)).First(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	} else if err != nil {
		logrus.Errorf("query squad in mission %d: %v", *missionID, err)
		return nil, err
	} else {
		return _squad, nil
	}
}

// GetEndedGame is the resolver for the getEndedGame field.
func (r *queryResolver) GetEndedGame(ctx context.Context, req model.GameRequest) (*ent.Game, error) {
	// 大概率不需要该接口，可以由 Act 中的功能代替
	var _game *ent.Game
	if err := db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		// 先看看 Game 的 Missions 是不是分出结果了
		missions, err := tx.Mission.Query().
			Where(
				mission.GameID(tools.StringToInt64(req.ID)),
				mission.DeletedAt(tools.ZeroTime),
				mission.StatusNEQ(mission.StatusDelayed),
			).
			All(ctx)
		closedCount := 0
		failedCount := 0
		for _, v := range missions {
			if v.Status == mission.StatusClosed {
				closedCount += 1
				if v.Failed {
					failedCount += 1
				}
			}
		}
		// 还没结束的话，返回空
		if failedCount != 3 && closedCount-failedCount < 3 {
			return nil
		}
		// 如果失败达到 3 次，游戏状态直接变成 result red
		if failedCount == 3 {
			err = tx.Game.UpdateOneID(tools.StringToInt64(req.ID)).SetResult(game.ResultRed).Exec(ctx)
			if err != nil {
				logrus.Errorf("update game %s result to red: %v", req.ID, err)
				return err
			}
		}
		_game, err = tx.Game.Query().
			Where(game.ID(tools.StringToInt64(req.ID)), game.DeletedAt(tools.ZeroTime)).
			WithNamedGameUsers("gameUsers", func(query *ent.GameUserQuery) {
				query.Where(gameuser.HasGameWith(game.ResultNEQ(game.ResultNone))).WithCard()
			}).
			First(ctx)
		if err != nil {
			logrus.Errorf("query game %s when get ended game info: %v", req.ID, err)
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return _game, nil
}

// GetVagueGameUsers is the resolver for the getVagueGameUsers field.
func (r *queryResolver) GetVagueGameUsers(ctx context.Context, req model.GameRequest) ([]*ent.GameUser, error) {
	// 该方法在输出时会被中间件拦截修改返回信息
	gameUsers, err := r.client.GameUser.Query().
		Where(gameuser.GameID(tools.StringToInt64(req.ID)), gameuser.DeletedAt(tools.ZeroTime)).
		WithCard().
		Order(ent.Asc(gameuser.FieldNumber)).
		All(ctx)
	if err != nil {
		logrus.Errorf("query gameUsers of game %s when getVagueGameUsers: %v", req.ID, err)
		return nil, err
	}
	return gameUsers, nil
}

// GetGameUsersByGame is the resolver for the getGameUsersByGame field.
func (r *queryResolver) GetGameUsersByGame(ctx context.Context, req model.GameRequest) ([]*ent.GameUser, error) {
	// 先检查 Game 状态，如果已结束，则返回时允许访问 Card，通过事务来限制 graphql 的自行进一步访问
	var gameUsers []*ent.GameUser
	if err := db.WithTx(ctx, r.client, func(tx *ent.Tx) error {
		_game, err := tx.Game.Query().Where(game.ID(tools.StringToInt64(req.ID))).First(ctx)
		if err != nil {
			logrus.Errorf("query game %s when geting gameUsers: %v", req.ID, err)
			return err
		}
		// 如果游戏出结果了，那么大家的身份可以暴露
		if _game.Result != game.ResultNone {
			gameUsers, err = tx.GameUser.Query().
				Where(gameuser.DeletedAt(tools.ZeroTime), gameuser.GameID(tools.StringToInt64(req.ID))).
				Order(ent.Asc(gameuser.FieldNumber)).
				WithCard().
				All(ctx)
		} else {
			gameUsers, err = tx.GameUser.Query().
				Where(gameuser.DeletedAt(tools.ZeroTime), gameuser.GameID(tools.StringToInt64(req.ID))).
				Order(ent.Asc(gameuser.FieldNumber)).
				All(ctx)
		}
		if err != nil {
			logrus.Errorf("query gameUsers by gameID %d: %v", _game.ID, err)
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return gameUsers, nil
}

// GetOnesCardInGame is the resolver for the getOnesCardInGame field.
func (r *queryResolver) GetOnesCardInGame(ctx context.Context, req model.GameUserRequest) (*ent.Card, error) {
	// 获取自己的身份牌信息
	gameUser, err := r.client.GameUser.Query().
		Where(
			gameuser.UserID(tools.StringToInt64(req.UserID)),
			gameuser.GameID(tools.StringToInt64(req.GameID)),
			gameuser.DeletedAt(tools.ZeroTime),
		).
		WithCard(func(cardQuery *ent.CardQuery) {
			cardQuery.Where(card.DeletedAt(tools.ZeroTime))
		}).
		First(ctx)
	if err != nil {
		logrus.Errorf("get one's GameUser for Card from game %s of user %s: %v", req.GameID, req.UserID, err)
		return nil, err
	}
	if gameUser.Edges.Card == nil {
		return nil, fmt.Errorf("don't have card for this gameUser %d, which should never happen", gameUser.ID)
	}
	return gameUser.Edges.Card, nil
}

// ViewOthersInGame is the resolver for the viewOthersInGame field.
func (r *queryResolver) ViewOthersInGame(ctx context.Context, req model.GameUserRequest) ([]*model.OtherView, error) {
	// 凭本人的身份来返回对应的他人数据，全查询静态数据操作，不加事务
	// 先把人都搜出来
	gameUsers, err := r.client.GameUser.Query().
		Where(
			gameuser.GameID(tools.StringToInt64(req.GameID)),
			gameuser.DeletedAt(tools.ZeroTime),
		).
		WithCard().
		All(ctx)
	if err != nil {
		logrus.Errorf("query gameUsers of game %s: %v", req.GameID, err)
		return nil, err
	}
	// 找出自己的身份
	var selfCardName card.Name
	var selfCardRed bool
	for _, gameUser := range gameUsers {
		if gameUser.UserID == tools.StringToInt64(req.UserID) {
			selfCardName = gameUser.Edges.Card.Name
			selfCardRed = gameUser.Edges.Card.Red
			break
		}
	}
	// 准备构建返回数据
	res := make([]*model.OtherView, 0)
	for _, gameUser := range gameUsers {
		switch selfCardName {
		// 梅林看所有，看错莫德雷德
		case card.NameMerlin:
			if gameUser.Edges.Card.Red == false {
				// 蓝方全看见
				res = append(res, &model.OtherView{
					UserID: strconv.FormatInt(gameUser.UserID, 10),
					Type:   "BLUE",
				})
			} else {
				// 红方中看不到莫德雷德
				if gameUser.Edges.Card.Name == card.NameMordred {
					res = append(res, &model.OtherView{
						UserID: strconv.FormatInt(gameUser.UserID, 10),
						Type:   "BLUE",
					})
				} else {
					// 其它红方能看出来
					res = append(res, &model.OtherView{
						UserID: strconv.FormatInt(gameUser.UserID, 10),
						Type:   "RED",
					})
				}
			}
		// 派西看梅林和莫甘娜，但看不懂
		case card.NamePercival:
			if gameUser.Edges.Card.Name == card.NameMerlin || gameUser.Edges.Card.Name == card.NameMorgana {
				res = append(res, &model.OtherView{
					UserID: strconv.FormatInt(gameUser.UserID, 10),
					Type:   "UNKNOWN",
				})
			}
		// 除奥伯伦外，红方看到红方
		default:
			if selfCardRed && selfCardName != card.NameOberon {
				if gameUser.Edges.Card.Red && gameUser.Edges.Card.Name != card.NameOberon {
					res = append(res, &model.OtherView{
						UserID: strconv.FormatInt(gameUser.UserID, 10),
						Type:   "RED",
					})
				}
			}
		}
	}
	return res, err
}

// User is the resolver for the user field.
func (r *roomUserResolver) User(ctx context.Context, obj *ent.RoomUser) (*model.User, error) {
	user, err := GetUserAtResolver(ctx, obj.UserID)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// User is the resolver for the user field.
func (r *squadResolver) User(ctx context.Context, obj *ent.Squad) (*model.User, error) {
	fc := graphql.GetFieldContext(ctx)
	logrus.Infof("%s\n", fc.Object)
	return &model.User{
		ID: strconv.FormatInt(obj.UserID, 10),
	}, nil
}

// GetRoomUsers is the resolver for the getRoomUsers field.
func (r *subscriptionResolver) GetRoomUsers(ctx context.Context, req *model.RoomRequest) (<-chan []*ent.RoomUser, error) {
	roomID := tools.StringToInt64(req.ID)
	ch := make(chan []*ent.RoomUser)
	go func() {
		for {
			roomUsers, err := r.client.RoomUser.
				Query().
				Where(roomuser.RoomID(roomID), roomuser.DeletedAt(tools.ZeroTime)).
				Order(ent.Asc(roomuser.FieldUpdatedAt)).
				All(ctx)
			if err != nil {
				logrus.Errorf("fetching roomUser of room %d: %v", roomID, err)
				return
			}
			select {
			case ch <- roomUsers:
				time.Sleep(1 * time.Second)
			}
		}
	}()
	return ch, nil
}

// GetRoomOngoingGame is the resolver for the getRoomOngoingGame field.
func (r *subscriptionResolver) GetRoomOngoingGame(ctx context.Context, req model.RoomRequest) (<-chan *ent.Game, error) {
	// 获取某个 Room 中 closed 状态是 false 的 Game，按道理说，没有 bug 的情况下，不会能找到两条数据
	ch := make(chan *ent.Game)
	roomID := tools.StringToInt64(req.ID)
	// 首先检查房间是正常的
	_, err := r.client.Room.Query().Where(room.ID(roomID), room.DeletedAt(tools.ZeroTime), room.Closed(false)).First(ctx)
	if err != nil {
		logrus.Errorf("query room %d before fetch room's game: %v", roomID, err)
		return nil, err
	}
	go func() {
		for {
			ongoingGames, err := r.client.Game.
				Query().
				Where(
					game.RoomID(roomID),
					game.DeletedAt(tools.ZeroTime),
					// 游戏出结果了，但是还没关闭的话，就还是可以看到
					game.Closed(false),
				).
				All(ctx)
			if err != nil {
				logrus.Errorf("querying ongoing game within room %s: %v", req.ID, err)
				return
			}
			ongoingGamesLen := len(ongoingGames)
			if ongoingGamesLen > 1 {
				logrus.Errorf("something is wrong, room %s has many ongoing games", req.ID)
				return
			}
			time.Sleep(time.Second)
			if ongoingGamesLen == 0 {
				// 游戏还没开始
				select {
				case ch <- nil:
					// 返回空对象
				}
			} else {
				// 游戏开始，返回 game，带上 gameUsers，让前端判断当前用户是否在局中，以决定进入游戏界面
				_game, err := r.client.Game.
					Query().
					Where(game.ID(ongoingGames[0].ID)).
					WithNamedGameUsers("gameUsers").
					First(ctx)
				if err != nil {
					logrus.Errorf("query the ongoing game %d: %v", ongoingGames[0].ID, err)
				}
				select {
				case ch <- _game:
					// 传输
				}
			}
		}
	}()
	return ch, nil
}

// GetMissionsByGame is the resolver for the getMissionsByGame field.
func (r *subscriptionResolver) GetMissionsByGame(ctx context.Context, req model.GameRequest) (<-chan []*ent.Mission, error) {
	// 前端目前用这个方法，只需要知道轮到哪个任务在进行，和这些任务的状态，不需要知道 Mission 的 Squad 等后续数据
	ch := make(chan []*ent.Mission)
	// 检查入参 gameID
	gameID := tools.StringToInt64(req.ID)
	_, err := r.client.Game.Query().Where(game.ID(gameID), game.DeletedAt(tools.ZeroTime)).First(ctx)
	if err != nil {
		logrus.Errorf("query missions of game %d: %v", gameID, err)
		return nil, err
	}
	go func() {
		for {
			missions, err := r.client.Mission.
				Query().
				Where(mission.GameID(gameID), mission.DeletedAt(tools.ZeroTime)).
				// 存在流局可能，所以要两级排序
				Order(ent.Asc(mission.FieldSequence), ent.Asc(mission.FieldCreatedAt)).
				All(ctx)
			if err != nil {
				logrus.Errorf("fetching missions of game %d: %v", gameID, err)
				return
			}
			select {
			case ch <- missions:
				time.Sleep(time.Second)
			}
		}
	}()
	return ch, nil
}

// GetAssassinationByGame is the resolver for the getAssassinationByGame field.
func (r *subscriptionResolver) GetAssassinationByGame(ctx context.Context, req model.GameRequest) (<-chan *model.AssassinInfo, error) {
	// 获取刺杀环节信息
	ch := make(chan *model.AssassinInfo)
	go func() {
		// 使用这个长链接中的 redisClient TODO 好像不用内置在链接中难以控制，这个方法也不会被重复调用
		cacheClient, ok := ctx.Value(cache.DefaultClient).(cache.Client)
		if !ok {
			logrus.Errorf("error at get cacheClient when get AssassinationInfo")
			return
		}
		defer cacheClient.Close()
		res := model.AssassinInfo{}
		for {
			_game, err := r.client.Game.Query().
				Where(game.ID(tools.StringToInt64(req.ID)), game.DeletedAt(tools.ZeroTime)).
				First(ctx)
			if err != nil {
				logrus.Errorf("get game %s info when fetching assassination: %v", req.ID, err)
				return
			}
			// 刺杀已经完成，更新实时记录
			if len(_game.TheAssassinatedIds) != 0 {
				res.TheAssassinatedIDs = _game.TheAssassinatedIds
				res.TempPickedIDs = res.TheAssassinatedIDs
			} else {
				// 从 redis 中获取 刺客暂时选定的 人
				tempAssassinatedIDs, err := cacheClient.GetGameTempAssassinatedIDs(ctx, req.ID)
				if err != nil {
					return
				}
				// 最终人选还没确认
				res.TheAssassinatedIDs = []string{}
				res.TempPickedIDs = tempAssassinatedIDs
			}
			select {
			case ch <- &res:
				time.Sleep(time.Second)
			}
		}
	}()
	return ch, nil
}

// GetGame is the resolver for the getGame field.
func (r *subscriptionResolver) GetGame(ctx context.Context, req model.GameRequest) (<-chan *ent.Game, error) {
	ch := make(chan *ent.Game)
	go func() {
		for {
			_game, err := r.client.Game.Get(ctx, tools.StringToInt64(req.ID))
			if err != nil {
				return
			}
			select {
			case ch <- _game:
				time.Sleep(time.Second)
			}
		}
	}()
	return ch, nil
}

// User is the resolver for the user field.
func (r *voteResolver) User(ctx context.Context, obj *ent.Vote) (*model.User, error) {
	fc := graphql.GetFieldContext(ctx)
	logrus.Infof("%s\n", fc.Object)
	return &model.User{
		ID: strconv.FormatInt(obj.UserID, 10),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
